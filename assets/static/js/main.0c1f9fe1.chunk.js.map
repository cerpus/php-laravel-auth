{"version":3,"sources":["ReactiveLoginApp.js","NewPassword.js","ForgotPassword.js","ForgotPasswordPage.js","ClaimAccounts.js","ClaimAccountsPage.js","InvalidEmailCode.js","InvalidEmailCodePage.js","index.js","lang/nb.js","lang/sv.js","lang/theme/edstep/en.js","lang/theme/edstep/nb.js","lang/theme/edstep/sv.js","lang/theme/learnplayground/en.js","lang/theme/learnplayground/nb.js","lang/theme/learnplayground/sv.js","lang/theme/edplan/en.js","lang/theme/edplan/nb.js","lang/theme/edplan/sv.js","lang.js","TermsAndConditions.js","LoginOperations.js","images/feide/emblemhvit-01.png","UserPasswordLogin.js","SignupForm.js","SignupVerifiedEmailForm.js","EnterpriseLogins.js","ReactiveLogin.js"],"names":["global","Intl","areIntlLocalesSupported","IntlPolyfill","require","NumberFormat","DateTimeFormat","ReactiveLoginApp","props","Object","_home_janeover_dev_javascript_reactive_auth_login_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_home_janeover_dev_javascript_reactive_auth_login_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_janeover_dev_javascript_reactive_auth_login_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","lang","theme","m","getMessages","authBaseUri","termsAndConditions","clientId","authorizeUri","codeAuthorizeUri","authorizeType","username","email","emailJwt","logoutUri","abortUri","idpUrisJson","extParams","authorizationCodeCallback","undefined","enterpriseLogins","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","react_intl__WEBPACK_IMPORTED_MODULE_9__","locale","messages","_ReactiveLogin__WEBPACK_IMPORTED_MODULE_8__","language","name","nodeList","document","getElementsByName","elements","i","length","item","matches","filter","element","tagName","toLowerCase","map","getAttribute","value","Component","defineMessages","signupPasswordFieldPlaceholder","id","defaultMessage","signupRepeatPasswordFieldPlaceholder","passwordsDoNotMatchError","passwordTooShortError","NewPassword","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","state","errors","type","fields","getElementsByClassName","setPasswordFieldType","passwordField","repeatPasswordField","consumer","formatMessage","intl","password","getPassword","getRepeatedPassword","setState","_this2","react_default","className","ref","placeholder","onMouseDown","showPasswords","onMouseUp","hidePasswords","onMouseOut","injectIntl","withRef","ForgotPassword","loginOpsProps","onEmailConflict","payload","intermediateToken","alert","onTermsAndConditions","jwt","loginOperations","LoginOperations","React","createRef","location","href","code","current","getWrappedInstance","validatePassword","requestBody","axios","post","claimId","querystring","stringify","xsrfCookieName","withCredentials","then","response","data","loggedIn","catch","error","_this3","src_NewPassword","Button","onClick","submit","index_es","TermsAndConditions","onAccept","acceptTermsAndConditions","onDecline","declineTermsAndConditions","ForgotPasswordPage","src_ForgotPassword","ClaimAccounts","domKey","Math","random","intermediateJwt","accounts","claimEmail","claimPasswordAccount","pullAccounts","get","encodeURIComponent","account","displayName","firstName","lastName","hasPassword","identity","headers","Authorization","_this4","claimAccount","_this5","allowLogin","_this6","claimAccountWithPassword","_this7","renderClaimPasswordAccount","values","options","key","accountName","createNewAccount","ClaimAccountsPage","src_ClaimAccounts","InvalidEmailCode","InvalidEmailCodePage","src_InvalidEmailCode","applyReactiveLogin","root","ReactDOM","render","rootElement","getElementById","getMeta","applyReactiveLoginFromMeta","window","applyForgotPassword","src_ForgotPasswordPage","applyClaimAccounts","src_ClaimAccountsPage","applyInvalidEmailCode","src_InvalidEmailCodePage","nbMessages","continueButton","weWillNeverPost","orSeparator","resetPasswordHeading","emailFieldLabel","weHaveSentEmail","changeForgottenEmail","pleaseFollowTheLinkFromEmail","didNotGetEmail","resendEmail","rememberToCheckYourSpam","loginWith","signup","signupWith","loginButton","loginFailedError","forgotPasswordLink","createNewAccountLink","usernamePlaceholder","passwordPlaceholder","emailInUseError","acceptTermsAndConditionsError","emailRequiredError","passwordRequiredError","signupEmailFieldPlaceholder","signupButton","signupPasswordRequirements","signupTermsAndConditionsLabel","termsAndConditionsLink","termsAndConditionsPopupTitle","closeButton","alreadyHaveAnAccount","logInHereLink","iAgreeButton","iDoNotAgreeButton","weHaveSentEmailTitle","embedSignupHeading","embedSignupP1","embedSignupP2","unexpectedAuthorizeResponse","svMessages","enEdstepMessages","nbEdstepMessages","svEdstepMessages","enLearnplaygroundMessages","nbLearnplaygroundMessages","svLearnplaygroundMessages","enEdplanMessages","nbEdplanMessages","svEdplanMessages","addLocaleData","concat","toConsumableArray","en","nb","nn","sv","themes","edstep","learnplayground","edplan","hasOwnProperty","t","k","innerHTML","insertTermsAndConditions","react__WEBPACK_IMPORTED_MODULE_5___default","react_intl__WEBPACK_IMPORTED_MODULE_7__","react_bootstrap__WEBPACK_IMPORTED_MODULE_6__","tcStatus","accepted","authorize","identityId","identities","loginWithIdentity","status","credentialsId","conflictingIdentity","authorizeData","redirect","authorizationRedirect","queryPos","indexOf","params","substring","split","pair","eqPos","decodeURIComponent","forEach","module","exports","__webpack_require__","p","UserPasswordLogin","loginError","onLogin","onForgotPassword","onSignup","usernameFieldDisabled","event","preventDefault","onSubmit","clickLogIn","method","disabled","clickForgotPassword","clickSignup","SignupForm","showTermsAndConditions","spinner","autoSubmit","termsAndConditionsAccepted","onTermsAndConditionsRequired","callback","prefillDone","autoSubmitDone","withoutPassword","checked","ok","repeatPassword","emailField","prefill","termsAndConditionsInnerHtml","isEmptyObject","candidates","body","react_loader_spinner_default","color","height","width","formElementsStyle","display","visible","style","renderPasswordFields","target","Modal","show","onShow","container","getAppRoot","ModalTitle","ModalBody","ModalFooter","clickLogin","object","Array","isArray","prop","SignupVerifiedEmailForm","signupElementsStyle","class","EnterpriseLogins","onClose","login","open","uri","openLogin","close","renderLogins","invalidEmailValidationError","sameEmailSuppliedValidationError","usernameTakenError","newUsernameRequiredError","changeUsernameFailed","ackChangeUsernameFailed","forgotPasswordFailed","loginFailedWithErrorCode","strangeResponseFromEndpoint","didNotReceiveIdentityResponseFromEndpoint","signupFailure","signupFailureNoClaimOptions","unableToSendEmail","ReactiveLogin","assign","mode","termsAndConditionsCallback","termsAndConditionsMode","idpEmailConflict","idpEmailToken","objectId","sha1","hasVerifiedEmail","extParamsInput","hideSignupIdps","embedSignup","signupWithoutPassword","signupAutoSubmit","signupFields","signupErrors","idpMergeLoginError","idpMergeLoginPasswordPrefill","idpEmailValidationError","idpChangeEmail","idpEmailWaitForEmail","claimVerified","claimPassword","mustChangeUsername","changeUsernameJwt","changeUsernamePreviousEmail","changeUsernameOtherLogins","changeUsernameError","authorizeWithSession","listener","addEventListener","attachEvent","json","JSON","parse","loginData","intermediateJwtToken","removedEmail","alternativeLogins","autoConnectIdentity","redirectUri","signupRequestPayload","success","abort","signupData","validationErrors","fieldErrors","field","message","forgotPasswordData","resetEmail","tryAuthorize","emailVerified","emailError","documentMode","url","setTimeout","token","pollTokenReturn","_this8","popupHref","openPopup","isIE11orLess","popup","forgotPasswordRequest","_this9","codeAuthorizeUrl","_this10","_this11","validationError","claimOptResponse","claimOptions","isVerified","claimOptError","_this12","idconnectLikeResponse","endpointName","_this13","_this14","_this15","usernameFieldRef","_this16","previousMode","_this17","listenEvent","_this18","src_UserPasswordLogin","idpLoginAndMerge","idpLoginAndMergeForgotPassword","verifyOverrideEmailAndClaimOptions","_this19","changeUserProceedWithoutUsername","_this20","changeUsernameFieldRef","changeUserProceedWithUsername","_this21","renderMustChangeUsernameHasAlternatives","renderMustChangeUsernameNoAlternatives","_this22","renderIdpRecursiveInUse","verifyEmailAndLogIn","changeEmailAndSignUp","idpSingupWithoutEmail","_this23","btnClass","skolon","feidetest","feideopenidp","feide","dataporten","google","facebook","windowslive","twitter","btnTitle","getEnterpriseLogins","renderExtIdpOrLoginHeading","getIdpUris","info","btnClassName","btnTitleStr","clickHandler","obj","parentNode","startPopupLogin","data-popup-href","popupTokenUri","data-popup-width","data-popup-height","src","feideLogo","alt","_this24","renderMustChangeUsername","renderIdpEmailInUse","hash","forgotPassword","termsElement","src_SignupVerifiedEmailForm","signupVerifiedSubmit","setLoginMode","showTermsAndConditionsWithCallback","src_SignupForm","signupSubmit","for","forgotPasswordByEmail","linebreak","changeEmailLink","resendEmailLink","_this25","src_EnterpriseLogins","renderEnterpriseLogin","renderTopWithExtIdps","renderMainContentPartDefaultLoginPart"],"mappings":"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","file":"static/js/main.0c1f9fe1.chunk.js","sourcesContent":["/* eslint-disable import/first */\n\nimport areIntlLocalesSupported from 'intl-locales-supported';\n\nvar localesMyAppSupports = [\n    \"en\", \"nb\", \"nn\", \"sv\"\n];\n\nif (global.Intl) {\n    // Determine if the built-in `Intl` has the locale data we need.\n    if (!areIntlLocalesSupported(localesMyAppSupports)) {\n        // `Intl` exists, but it doesn't have the data we need, so load the\n        // polyfill and replace the constructors with need with the polyfill's.\n        var IntlPolyfill = require('intl');\n        Intl.NumberFormat   = IntlPolyfill.NumberFormat;\n        Intl.DateTimeFormat = IntlPolyfill.DateTimeFormat;\n    }\n} else {\n    // No `Intl`, so use and load the polyfill.\n    global.Intl = require('intl');\n}\n\nimport React, { Component } from 'react';\nimport './App.css';\n\nimport ReactiveLogin from './ReactiveLogin';\n\nimport {IntlProvider} from 'react-intl';\nimport getMessages from './lang';\n\nclass ReactiveLoginApp extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    static getElementsByName(name) {\n        var nodeList = document.getElementsByName(name);\n        var elements = [];\n        for (var i = 0; i < nodeList.length; i++) {\n            elements[i] = nodeList.item(i);\n        }\n        return elements;\n    }\n    static getMeta(name) {\n        var matches =  ReactiveLoginApp.getElementsByName(name)\n            .filter(element => typeof(element.tagName) !== 'undefined')\n            .filter(element => element.tagName.toLowerCase() === \"meta\")\n            .map(element => element.getAttribute(\"content\"))\n            .filter(value => typeof(value) !== \"undefined\")\n            .filter(value => value);\n        if (matches.length > 0) {\n            return matches[0];\n        } else {\n            return null;\n        }\n    }\n    render() {\n        const lang = this.props.lang;\n        const theme = this.props.theme;\n\n        const m = getMessages(lang, theme);\n\n        const authBaseUri = this.props.authBaseUri;\n        const termsAndConditions = this.props.termsAndConditions;\n        const clientId = this.props.clientId;\n        const authorizeUri = this.props.authorizeUri;\n        const codeAuthorizeUri = this.props.codeAuthorizeUri;\n        const authorizeType = this.props.authorizeType;\n        const username = this.props.username;\n        const email = this.props.email;\n        const emailJwt = this.props.emailJwt;\n        const logoutUri = this.props.logoutUri;\n        const abortUri = this.props.abortUri;\n        const idpUrisJson = this.props.idpUrisJson;\n        const extParams = this.props.extParams;\n        const authorizationCodeCallback = typeof(this.props.authorizationCodeCallback) === 'function' ? this.props.authorizationCodeCallback : undefined;\n        const enterpriseLogins = this.props.enterpriseLogins;\n        return (\n            <IntlProvider locale={lang} messages={m}>\n                <ReactiveLogin\n                    authBaseUri={authBaseUri}\n                    language={lang}\n                    termsAndConditions={termsAndConditions}\n                    clientId={clientId}\n                    authorizeUri={authorizeUri}\n                    codeAuthorizeUri={codeAuthorizeUri}\n                    authorizeType={authorizeType}\n                    username={username}\n                    email={email}\n                    emailJwt={emailJwt}\n                    logoutUri={logoutUri}\n                    abortUri={abortUri}\n                    idpUrisJson={idpUrisJson}\n                    extParams={extParams}\n                    authorizationCodeCallback={authorizationCodeCallback}\n                    enterpriseLogins={enterpriseLogins}\n                />\n            </IntlProvider>\n        );\n    }\n}\n\nexport default ReactiveLoginApp;\n","\nimport React, {Component} from 'react';\nimport {FormattedMessage, intlShape, injectIntl, defineMessages} from 'react-intl';\nimport axios from \"axios\";\n\nconst messages = defineMessages({\n    signupPasswordFieldPlaceholder: {\n        'id': 'signupPasswordFieldPlaceholder',\n        'defaultMessage': '(Choose a password)'\n    },\n    signupRepeatPasswordFieldPlaceholder: {\n        'id': 'signupRepeatPasswordFieldPlaceholder',\n        'defaultMessage': '(Repeat password)'\n    },\n    passwordsDoNotMatchError:{\n        'id': 'passwordsDoNotMatchError',\n        'defaultMessage': 'Passwords do not match.'\n    },\n    passwordTooShortError:{\n        'id': 'passwordTooShortError',\n        'defaultMessage': 'The password is too short. Minimum 6 characters.'\n    }\n});\n\nclass NewPassword extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            'errors': {}\n        };\n    }\n\n    setPasswordFieldType(type) {\n        var fields = document.getElementsByClassName(\"password-field\");\n        for (var i = 0; fields.length; i++) {\n            fields.item(i).type = type;\n        }\n    }\n    showPasswords() {\n        this.setPasswordFieldType('text');\n    }\n    hidePasswords() {\n        this.setPasswordFieldType('password');\n    }\n\n    getPassword() {\n        const password = this.passwordField.value;\n        return password;\n    }\n\n    getRepeatedPassword() {\n        const repeatedPassword = this.repeatPasswordField.value;\n        return repeatedPassword;\n    }\n\n    validatePassword(consumer) {\n        const {formatMessage} = this.props.intl;\n        const password = this.getPassword();\n        const repeatedPassword = this.getRepeatedPassword();\n\n        if (password === repeatedPassword) {\n            if (password.length >= 6) {\n                consumer(password);\n            } else {\n                this.setState({\"errors\": {\"password\": formatMessage(messages.passwordTooShortError)}});\n            }\n        } else {\n            this.setState({\"errors\": {\"password\": formatMessage(messages.passwordsDoNotMatchError)}});\n        }\n    }\n\n    render() {\n        const {formatMessage} = this.props.intl;\n\n        return (\n            <div>\n                {\n                    (() => {\n                        if (typeof (this.state.errors) !== \"undefined\" && typeof (this.state.errors.password) !== \"undefined\") {\n                            return (\n                                <div\n                                    className=\"error col-sm-12 alert alert-danger\">{this.state.errors.password}</div>\n                            );\n                        } else {\n                            return (<span></span>);\n                        }\n                    })()\n                }\n\n                <input className=\"col-sm-12 password-field\" type=\"password\" ref={(ref) => { this.passwordField = ref; }}\n                       placeholder={formatMessage(messages.signupPasswordFieldPlaceholder)} name=\"password\"/>\n                <input className=\"col-sm-12 password-field\" type=\"password\" ref={(ref) => { this.repeatPasswordField = ref; }}\n                       placeholder={formatMessage(messages.signupRepeatPasswordFieldPlaceholder)}\n                       name=\"repeatpassword\"/>\n                <div className=\"col-sm-2 eyeholder\" onMouseDown={() => {\n                    this.showPasswords();\n                }} onMouseUp={() => {\n                    this.hidePasswords();\n                }} onMouseOut={() => {\n                    this.hidePasswords();\n                }}></div>\n            </div>\n        );\n    }\n}\n\nNewPassword.propTypes = {\n    intl: intlShape.isRequired\n};\n\nexport default injectIntl(NewPassword, {withRef: true});","\nimport React, {Component} from 'react';\nimport {Button} from 'react-bootstrap';\nimport {FormattedMessage, intlShape, injectIntl, defineMessages} from 'react-intl';\nimport querystring from 'querystring';\nimport axios from 'axios';\nimport LoginOperations from './LoginOperations';\nimport TermsAndConditions from \"./TermsAndConditions\";\nimport NewPassword from \"./NewPassword\";\n\nconst messages = defineMessages({\n});\n\nclass ForgotPassword extends Component {\n    constructor(props) {\n        super(props);\n\n        const loginOpsProps = {\n            intl: this.props.intl,\n            authorizationCodeCallback: typeof(props.authorizationCodeCallback) === 'function' ? props.authorizationCodeCallback : undefined,\n            authBaseUri: props.authBaseUri,\n            clientId: props.clientId,\n            codeAuthorizeUri: props.codeAuthorizeUri,\n            onEmailConflict: (payload, intermediateToken) => {\n                alert('Forgot password failed with failure to resolve email conflict');\n            },\n            onTermsAndConditions: (jwt, termsAndConditions) => {\n                this.setState({\n                    \"jwt\": jwt,\n                    \"termsAndConditions\": termsAndConditions\n                });\n            }\n        };\n        this.loginOperations = new LoginOperations(loginOpsProps);\n        this.state = {\n            'errors': {},\n            'language': typeof(props.language) !== 'undefined' ? props.language : 'en',\n            'termsAndConditions': false,\n            'jwt': false\n        };\n        this.passwordField = React.createRef();\n    }\n\n    declineTermsAndConditions() {\n        document.location.href = this.props.logoutUri;\n    }\n\n    submit() {\n        const code = this.props.code;\n        this.passwordField.current.getWrappedInstance().validatePassword((password) => {\n            const requestBody = {\n                'code': code,\n                'password': password\n            };\n            axios.post(\n                this.props.authBaseUri+'/v1/login/idp/forgotpassword/'+this.props.claimId, querystring.stringify(requestBody), {\n                    'xsrfCookieName': null,\n                    'withCredentials': true\n                }\n            )\n                .then((response) => {\n                    var loginResponse = response.data;\n                    var jwt = loginResponse.jwt;\n                    if (typeof(jwt) !== 'undefined' && jwt) {\n                        this.loginOperations.loggedIn(this.state.language, jwt);\n                    } else {\n                        alert('Forgot password step did not produce a JWT');\n                    }\n                })\n                .catch((error) => {\n                    alert('Forgot password step in login process failed');\n                });\n        });\n    }\n\n    render() {\n        if (this.state.termsAndConditions === false) {\n            return (\n                <div className=\"reactive-auth-login\">\n                    <h1>Reset password</h1>\n                    <p>Please reset your password by typing your new password twice below:</p>\n\n                    <NewPassword errors={this.state.errors} ref={this.passwordField}/>\n\n                    <div>\n                        <Button onClick={() => {\n                            this.submit();\n                        }} className=\"btn btn-success\">\n                            <FormattedMessage id=\"submitForgotPasswordButton\" defaultMessage=\"Save and continue\"/>\n                        </Button>\n                    </div>\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"reactive-auth-login\">\n                    <TermsAndConditions onAccept={() => { this.loginOperations.acceptTermsAndConditions(this.state.jwt); }} onDecline={() => { this.declineTermsAndConditions(); }} termsAndConditions={this.state.termsAndConditions} />\n                </div>\n            );\n        }\n    }\n}\n\nForgotPassword.propTypes = {\n    intl: intlShape.isRequired\n};\n\nexport default injectIntl(ForgotPassword);\n","\nimport React, {Component} from 'react';\nimport getMessages from './lang';\nimport {IntlProvider} from \"react-intl\";\nimport ForgotPassword from \"./ForgotPassword\";\n\n\nclass ForgotPasswordPage extends Component {\n    render() {\n\n        const lang = typeof(this.props.lang) !== 'undefined' ? this.props.lang : 'en';\n        const messages = getMessages(lang);\n\n        return (\n            <IntlProvider locale={lang} messages={messages}>\n                <ForgotPassword {...this.props}/>\n            </IntlProvider>\n        );\n    }\n}\n\nexport default ForgotPasswordPage;\n","\nimport React, {Component} from 'react';\nimport {FormattedMessage, intlShape, injectIntl, defineMessages} from 'react-intl';\nimport LoginOperations from \"./LoginOperations\";\nimport TermsAndConditions from \"./TermsAndConditions\";\nimport axios from 'axios';\nimport {Button} from \"react-bootstrap\";\nimport querystring from 'querystring';\nimport NewPassword from \"./NewPassword\";\n\nclass ClaimAccounts extends Component {\n    constructor(props) {\n        super(props);\n\n        const loginOpsProps = {\n            intl: this.props.intl,\n            authorizationCodeCallback: typeof(props.authorizationCodeCallback) === 'function' ? props.authorizationCodeCallback : undefined,\n            authBaseUri: props.authBaseUri,\n            clientId: props.clientId,\n            codeAuthorizeUri: props.codeAuthorizeUri,\n            onEmailConflict: (payload, intermediateToken) => {\n                alert('Forgot password failed with failure to resolve email conflict');\n            },\n            onTermsAndConditions: (jwt, termsAndConditions) => {\n                this.setState({\n                    \"jwt\": jwt,\n                    \"termsAndConditions\": termsAndConditions\n                });\n            }\n        };\n        this.loginOperations = new LoginOperations(loginOpsProps);\n        this.domKey = \"\" + Math.random();\n        this.state = {\n            'errors': {},\n            'language': typeof(props.language) !== 'undefined' ? props.language : 'en',\n            'termsAndConditions': false,\n            'jwt': false,\n            'intermediateJwt': false,\n            'accounts': [],\n            'claimEmail': false,\n            'claimPasswordAccount': false\n        };\n        this.passwordField = React.createRef();\n        this.pullAccounts();\n    }\n\n    pullAccounts() {\n        axios.get(this.props.authBaseUri+'/v1/login/idp/claimaccounts/'+this.props.claimId+'?code='+encodeURIComponent(this.props.code), {\n        })\n            .then((response) => {\n                const data = response.data;\n                if (typeof(data.accounts) !== 'undefined' && typeof(data.intermediateJwt) !== 'undefined' && typeof(data.claimEmail) !== 'undefined') {\n                    this.setState({'accounts': data.accounts, 'intermediateJwt': data.intermediateJwt, 'claimEmail': data.claimEmail});\n                } else {\n                    alert('Invalid response data on claim accounts');\n                }\n            })\n            .catch((error) => {\n                alert('Claim accounts failure');\n            })\n    }\n\n    declineTermsAndConditions() {\n        document.location.href = this.props.logoutUri;\n    }\n\n    accountName(account) {\n        if (account.displayName) {\n            return account.displayName;\n        } else if (account.firstName) {\n            if (account.lastName) {\n                return account.firstName + \" \" + account.lastName;\n            } else {\n                return account.firstName;\n            }\n        } else if (account.lastName) {\n            return account.lastName;\n        } else {\n            return \"No Name\";\n        }\n    }\n\n    claimAccount(account, password) {\n        if (account.hasPassword && typeof(password) === 'undefined') {\n            this.setState({'claimPasswordAccount': account});\n        } else {\n            var data = {'id': account.identity.id};\n            if (typeof(password) !== 'undefined') {\n                data.password = password;\n            }\n            axios.post(this.props.authBaseUri + '/v1/login/idp/claimaccount', querystring.stringify(data), {\n                'headers': {\n                    'Authorization': 'Bearer ' + this.state.intermediateJwt\n                }\n            })\n                .then((response) => {\n                    const data = response.data;\n                    if (typeof (data.jwt) !== 'undefined') {\n                        const jwt = data.jwt;\n                        this.loginOperations.loggedIn(this.state.language, jwt);\n                    } else {\n                        alert('Claim account failed with bad response');\n                    }\n                })\n                .catch((error) => {\n                    alert('Claim account failed');\n                });\n        }\n    }\n\n    claimAccountWithPassword() {\n        this.passwordField.current.getWrappedInstance().validatePassword((password) => {\n           this.claimAccount(this.state.claimPasswordAccount, password);\n        });\n    }\n\n    createNewAccount() {\n        axios.post(this.props.authBaseUri+'/v1/login/idp/claimemail', querystring.stringify({'email': this.state.claimEmail, 'allowLogin': true}), {\n            'headers': {\n                'Authorization': 'Bearer '+this.state.intermediateJwt\n            }\n        })\n            .then((response) => {\n                const data = response.data;\n                if (typeof(data.jwt) !== 'undefined') {\n                    const jwt = data.jwt;\n                    this.loginOperations.loggedIn(this.state.language, jwt);\n                } else {\n                    alert('Claim email failed with bad response');\n                }\n            })\n            .catch((error) => {\n                alert('Claim email failed');\n            });\n    }\n\n    renderClaimPasswordAccount() {\n        return (\n            <div className=\"reactive-auth-login\">\n                <p>Please set a new password for your account:</p>\n                <NewPassword ref={this.passwordField}/>\n                <Button onClick={() => {\n                    this.claimAccountWithPassword();\n                }} className=\"btn btn-success\">\n                    <FormattedMessage id=\"submitForgotPasswordButton\" defaultMessage=\"Save and continue\"/>\n                </Button>\n            </div>\n        );\n    }\n\n    render() {\n        if (this.state.termsAndConditions === false) {\n            if (this.state.claimPasswordAccount !== false) {\n                return this.renderClaimPasswordAccount();\n            }\n            if (this.state.accounts.length > 0) {\n                return (\n                    <div className=\"reactive-auth-login\">\n                        <p>\n                            <FormattedMessage\n                                id={'idpConflictProceedClaimEmail'}\n                                defaultMessage={'You have successfully confirmed your email address {email}. Please use an existing account or create a new account:'}\n                                values={{'email': this.state.claimEmail}}\n                            />\n                        </p>\n                        <ul>\n                            {\n                                (() => {\n                                    let options = this.state.accounts.map((account) => {\n                                        return (\n                                            <li key={account.identity.id}>\n                                                {this.accountName(account.identity)} {account.identity.email ? account.identity.email : \"(No primary email)\"}\n                                                <Button onClick={() => {\n                                                    this.claimAccount(account);\n                                                }} className=\"btn btn-success\">\n                                                    <FormattedMessage id=\"claimExistingAccountButton\"\n                                                                      defaultMessage=\"Use this account\"/>\n                                                </Button>\n                                            </li>\n                                        );\n                                    });\n                                    if (this.state.claimEmail) {\n                                        options[options.length] = (\n                                            <li>\n                                                <p><FormattedMessage\n                                                    id=\"questionCreateNewAccountAndDisconnectOthers\"\n                                                    defaultMessage=\"Would you like to create a new account using {email}? This email address will be removed from the other accounts.\"\n                                                    values={{'email': this.state.claimEmail}}/></p>\n                                                <Button onClick={() => {\n                                                    this.createNewAccount();\n                                                }} className=\"btn btn-success\">\n                                                    <FormattedMessage id=\"createNewAccountLink\"\n                                                                      defaultMessage=\"Create new account\"/>\n                                                </Button>\n                                            </li>\n                                        );\n                                    }\n                                    return options;\n                                })()\n                            }\n                        </ul>\n                    </div>\n                );\n            } else if (this.state.claimEmail) {\n                return (\n                    <div className=\"reactive-auth-login\">\n                        <p>\n                            <FormattedMessage\n                                id={'idpConflictProceedClaimSignupWithEmail'}\n                                defaultMessage={'You have successfully confirmed your email address {email}. You can now proceed with signing up:'}\n                                values={{'email': this.state.claimEmail}}\n                            />\n                        </p>\n                        <div>\n                            <Button onClick={() => {\n                                this.createNewAccount();\n                            }} className=\"btn btn-success\">\n                                <FormattedMessage id=\"createNewAccountLink\"\n                                                  defaultMessage=\"Create new account\"/>\n                            </Button>\n                        </div>\n                    </div>\n                );\n            } else {\n                return (\n                    <div>\n                        <p>\n                            <FormattedMessage\n                                id={'idpConflictClaimSomethingWentWrong'}\n                                defaultMessage={'Something went wrong during the signup process. There are no apparent ways to continue this signup. Please try again or contact support.'}\n                            />\n                        </p>\n                    </div>\n                )\n            }\n        } else {\n            return (\n                <div className=\"reactive-auth-login\">\n                    <TermsAndConditions onAccept={() => { this.loginOperations.acceptTermsAndConditions(this.state.jwt); }} onDecline={() => { this.declineTermsAndConditions(); }} termsAndConditions={this.state.termsAndConditions} />\n                </div>\n            );\n        }\n    }\n}\n\nClaimAccounts.propTypes = {\n    intl: intlShape.isRequired\n};\n\nexport default injectIntl(ClaimAccounts);\n","\nimport React, {Component} from 'react';\nimport getMessages from './lang';\nimport {IntlProvider} from \"react-intl\";\nimport ClaimAccounts from './ClaimAccounts';\n\nclass ClaimAccountsPage extends Component {\n    render() {\n\n        const lang = typeof(this.props.lang) !== 'undefined' ? this.props.lang : 'en';\n        const messages = getMessages(lang);\n\n        return (\n            <IntlProvider locale={lang} messages={messages}>\n                <ClaimAccounts {...this.props}/>\n            </IntlProvider>\n        );\n    }\n}\n\nexport default ClaimAccountsPage;","\nimport React, {Component} from 'react';\nimport {FormattedMessage, intlShape, injectIntl, defineMessages} from 'react-intl';\n\nclass InvalidEmailCode extends Component {\n    render() {\n        return (\n            <div className=\"reactive-auth-login\">\n                <h1>\n                    <FormattedMessage id={'invalidOrExpiredEmailCodeDescription'} defaultMessage={'The link has expired'} />\n                </h1>\n                <p>\n                    <FormattedMessage id={'invalidOrExpiredEmailCodeDescription'} defaultMessage={'We are very sorry, but this link is either invalid or it has expired. If you did forget your password please try the \"forgot password\" link on the login page again to get a new link. Otherwise try logging in again in order to resolve this issue.'} />\n                </p>\n            </div>\n        )\n    }\n}\n\nInvalidEmailCode.propTypes = {\n    intl: intlShape.isRequired\n};\n\nexport default injectIntl(InvalidEmailCode);","\nimport React, {Component} from 'react';\nimport getMessages from './lang';\nimport {IntlProvider} from \"react-intl\";\nimport InvalidEmailCode from \"./InvalidEmailCode\";\n\n\nclass InvalidEmailCodePage extends Component {\n    render() {\n\n        const lang = typeof(this.props.lang) !== 'undefined' ? this.props.lang : 'en';\n        const messages = getMessages(lang);\n\n        return (\n            <IntlProvider locale={lang} messages={messages}>\n                <InvalidEmailCode {...this.props}/>\n            </IntlProvider>\n        );\n    }\n}\n\nexport default InvalidEmailCodePage;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactiveLoginApp from './ReactiveLoginApp';\nimport ForgotPasswordPage from './ForgotPasswordPage';\nimport './index.css';\nimport ClaimAccountsPage from \"./ClaimAccountsPage\";\nimport InvalidEmailCodePage from \"./InvalidEmailCodePage\";\n\n(function () {\n    const applyForgotPassword = function (\n        root, props\n    ) {\n        ReactDOM.render(\n            <ForgotPasswordPage {...props}/>,\n            root\n        );\n    };\n\n    const applyClaimAccounts = function (\n        root, props\n    ) {\n        ReactDOM.render(\n            <ClaimAccountsPage {...props}/>,\n            root\n        );\n    };\n\n    const applyInvalidEmailCode = function(\n        root, props\n    ) {\n        ReactDOM.render(\n            <InvalidEmailCodePage {...props}/>,\n            root\n        );\n    };\n\n    const applyReactiveLogin = function (\n        root,\n        authBaseUri,\n        lang,\n        theme,\n        termsAndConditions,\n        clientId,\n        authorizeUri,\n        codeAuthorizeUri,\n        username,\n        email,\n        emailJwt,\n        logoutUri,\n        abortUri,\n        idpUrisJson,\n        authorizeType,\n        extParams,\n        authorizationCodeCallback,\n        enterpriseLogins\n    ) {\n        ReactDOM.render(\n            <ReactiveLoginApp\n                lang={lang}\n                theme={theme}\n                authBaseUri={authBaseUri}\n                termsAndConditions={termsAndConditions}\n                clientId={clientId}\n                authorizeUri={authorizeUri}\n                codeAuthorizeUri={codeAuthorizeUri}\n                authorizeType={authorizeType}\n                username={username}\n                email={email}\n                emailJwt={emailJwt}\n                logoutUri={logoutUri}\n                abortUri={abortUri}\n                idpUrisJson={idpUrisJson}\n                extParams={extParams}\n                authorizationCodeCallback={authorizationCodeCallback}\n                enterpriseLogins={enterpriseLogins}\n            />,\n            root\n        );\n    };\n\n    const applyReactiveLoginFromMeta = function (root) {\n        const authBaseUri = \"\";\n        const lang = ReactiveLoginApp.getMeta(\"languageAlpha2\");\n        const theme = ReactiveLoginApp.getMeta(\"theme\");\n        const termsAndConditions = ReactiveLoginApp.getMeta(\"termsAndConditions\");\n        const clientId = ReactiveLoginApp.getMeta(\"clientId\");\n        const authorizeUri = ReactiveLoginApp.getMeta(\"authorizeUri\");\n        const codeAuthorizeUri = ReactiveLoginApp.getMeta(\"codeAuthorizeUri\");\n        const authorizeType = ReactiveLoginApp.getMeta(\"authorizeType\");\n        const username = ReactiveLoginApp.getMeta(\"username\");\n        const email = ReactiveLoginApp.getMeta(\"email\");\n        const emailJwt = ReactiveLoginApp.getMeta(\"emailJwt\");\n        const logoutUri = ReactiveLoginApp.getMeta(\"logoutUri\");\n        const abortUri = ReactiveLoginApp.getMeta(\"abortUri\");\n        const idpUrisJson = ReactiveLoginApp.getMeta(\"idpUrisJson\");\n\n        applyReactiveLogin(\n            root,\n\n            authBaseUri,\n            lang,\n            theme,\n            termsAndConditions,\n            clientId,\n            authorizeUri,\n            codeAuthorizeUri,\n            username,\n            email,\n            emailJwt,\n            logoutUri,\n            abortUri,\n            idpUrisJson,\n            authorizeType,\n            /*extParams=*/ {},\n            /*authorizationCodeCallback=*/ undefined,\n            /*enterpriseLogins=*/ undefined\n        );\n    };\n\n    (function () {\n        var rootElement = document.getElementById('reactiveLoginRootElement');\n        if (typeof(rootElement) !== 'undefined' && rootElement) {\n            applyReactiveLoginFromMeta(rootElement);\n        }\n    })();\n\n    window.applyForgotPassword = applyForgotPassword;\n    window.applyClaimAccounts = applyClaimAccounts;\n    window.applyInvalidEmailCode = applyInvalidEmailCode;\n    window.applyReactiveLogin = applyReactiveLogin;\n})();","\nconst nbMessages = {\n    \"continueButton\": \"Fortsett\",\n    \"weWillNeverPost\": \"Vi vil aldri poste uten din tillatelse.\",\n    \"orSeparator\": \"ELLER\",\n    \"resetPasswordHeading\": \"Nullstill eller opprett passord\",\n    \"emailFieldLabel\": \"E-post: \",\n    \"weHaveSentEmail\": \"Vi har sendt en epost til{linebreak}{resetEmail} ({changeEmailLink})\",\n    \"changeForgottenEmail\": \"endre epostadresse\",\n    \"pleaseFollowTheLinkFromEmail\": \"Vennligst følg lenken i eposten for å sette opp din konto\",\n    \"didNotGetEmail\": \"Fikk du ikke epost? {resendEmailLink}\",\n    \"resendEmail\": \"Send på nytt.\",\n    \"rememberToCheckYourSpam\": \"Psst! Husk å sjekke spamfolderen\",\n    \"loginWith\": \"Logg inn med\",\n    \"signup\": \"Lag konto\",\n    \"signupWith\": \"Lag konto med\",\n    \"loginButton\": \"Logg inn\",\n    \"loginFailedError\": \"Innlogging feilet! Vennligst sjekk ditt brukernavn og passord.\",\n    \"forgotPasswordLink\": \"Glemt passord?\",\n    \"createNewAccountLink\": \"Lag ny konto\",\n    \"usernamePlaceholder\": \"(Brukernavn eller e-post)\",\n    \"passwordPlaceholder\": \"(Passord)\",\n    \"emailInUseError\": \"E-postadressen er allerede i bruk. Enten bruk glemt passord-lenken til å gjenvinne kontroll over brukerkontoen eller skriv inn en annen e-postadresse.\",\n    \"acceptTermsAndConditionsError\": \"Du må godta vilkår og bestemmelser.\",\n    \"emailRequiredError\": \"E-post er påkrevd.\",\n    \"passwordRequiredError\": \"Passord er påkrevd.\",\n    \"passwordsDoNotMatchError\": \"Passordene er ikke like.\",\n    \"passwordTooShortError\": \"Passordet er for kort. Minimum 6 tegn\",\n    \"signupEmailFieldPlaceholder\": \"(Epost)\",\n    \"signupPasswordFieldPlaceholder\": \"(Velg passord)\",\n    \"signupRepeatPasswordFieldPlaceholder\": \"(Gjenta passord)\",\n    \"signupButton\": \"Lag konto\",\n    \"signupPasswordRequirements\": \"*Passord må være på minimum 6 tegn.\",\n    \"signupTermsAndConditionsLabel\": \"Jeg godtar {termsAndConditions}\",\n    \"termsAndConditionsLink\": \"vilkår og bestemmelser\",\n    \"termsAndConditionsPopupTitle\": \"Vilkår og bestemmelser\",\n    \"closeButton\": \"Lukk\",\n    \"alreadyHaveAnAccount\": \"Har du allerede en konto? {logInHereLink}\",\n    \"logInHereLink\": \"Logg inn her\",\n    \"iAgreeButton\": \"Jeg godtar\",\n    \"iDoNotAgreeButton\": \"Jeg godtar ikke\",\n    \"weHaveSentEmailTitle\": \"Snart klart!\",\n    \"embedSignupHeading\": \"Bekreft din brukerprofil\",\n    \"embedSignupP1\": \"Siden dette er første gang du tar ett av våre kurs eller spill, ber vi her om en ekstra runde innlogging for at din konto skal bli verifisert. Dette for at vi skal være 100% sikker på at dette er deg og kunne ivareta din personsikkerhet.\",\n    \"embedSignupP2\": \"Når du har logget inn vil du få en epost som du også må åpne og bekrefte. Dette er en engangs forespørsel og vil ikke være nødvendig neste gang du logger inn.\",\n    \"unexpectedAuthorizeResponse\": \"En nettverksfeil oppsto, venligst prøv på nytt\"\n};\n\nexport default nbMessages;\n","\nconst svMessages = {\n    \"continueButton\": \"Fortsätt\",\n    \"weWillNeverPost\": \"Vi kommer aldrig använda ditt konto utan din tillåtelse.\",\n    \"orSeparator\": \"ELLER\",\n    \"resetPasswordHeading\": \"Återställ eller skapa ett lösenord\",\n    \"emailFieldLabel\": \"E-postadress: \",\n    \"weHaveSentEmail\": \"Vi har skickat ett e-post till{linebreak}{resetEmail} ({changeEmailLink})\",\n    \"changeForgottenEmail\": \"byt e-postadress\",\n    \"pleaseFollowTheLinkFromEmail\": \"Vänligen följ länken i det e-postmeddelandet för att slutföra inställningarna av ditt konto.\",\n    \"didNotGetEmail\": \"Fick du inget e-post? {resendEmailLink}\",\n    \"resendEmail\": \"Skicka e-post på nytt.\",\n    \"rememberToCheckYourSpam\": \"Psst! Kom ihåg att titta i din skräppostmappen\",\n    \"loginWith\": \"Logga in med\",\n    \"signup\": \"Registrera dig\",\n    \"signupWith\": \"Registrera dig med\",\n    \"loginButton\": \"Logga in\",\n    \"loginFailedError\": \"Inloggning misslyckades! Vänligen kontrollera ditt användarnamn och lösenord.\",\n    \"forgotPasswordLink\": \"Glömt lösenordet?\",\n    \"createNewAccountLink\": \"Skapa ett nyt konto\",\n    \"usernamePlaceholder\": \"(Användarnamn eller e-postadress)\",\n    \"passwordPlaceholder\": \"(Lösenord)\",\n    \"emailInUseError\": \"E-postadressen används redan. Vänligen använd länken Glömt lösenord för att återställa ditt användarkonto, annars måste du skriva in en annan e-postadress.\",\n    \"acceptTermsAndConditionsError\": \"Du behöver acceptera villkoren.\",\n    \"emailRequiredError\": \"E-postadress är obligatorisk.\",\n    \"passwordRequiredError\": \"Lösenord är obligatoriskt.\",\n    \"passwordsDoNotMatchError\": \"Lösenorden matchar inte.\",\n    \"passwordTooShortError\": \"Lösenordet är för kort. Minst 6 tecken\",\n    \"signupEmailFieldPlaceholder\": \"(E-postadress)\",\n    \"signupPasswordFieldPlaceholder\": \"(Välj ett lösenord)\",\n    \"signupRepeatPasswordFieldPlaceholder\": \"(Repetera lösenord)\",\n    \"signupButton\": \"Registrera\",\n    \"signupPasswordRequirements\": \"*Lösenordet måste vara minst 6 tecken långt.\",\n    \"signupTermsAndConditionsLabel\": \"Jag godkänner {termsAndConditions}\",\n    \"termsAndConditionsLink\": \"Villkor\",\n    \"termsAndConditionsPopupTitle\": \"Villkor\",\n    \"closeButton\": \"Stänga\",\n    \"alreadyHaveAnAccount\": \"Har du redan ett konto? {logInHereLink}\",\n    \"logInHereLink\": \"Logga in här\",\n    \"iAgreeButton\": \"Jag godkänner\",\n    \"iDoNotAgreeButton\": \"Jag godkänner ej\",\n    \"weHaveSentEmailTitle\": \"Nästan klar!\"\n};\n\nexport default svMessages;\n","\nconst enEdstepMessages = {\n    \"termsAndConditionsLink\": \"EdStep Terms and Conditions\",\n    \"termsAndConditionsPopupTitle\": \"EdStep Terms and Conditions\"\n};\n\nexport default enEdstepMessages;","\nconst nbEdstepMessages = {\n    \"termsAndConditionsLink\": \"vilkår og bestemmelser for EdStep\",\n    \"termsAndConditionsPopupTitle\": \"EdStep vilkår og bestemmelser\"\n};\n\nexport default nbEdstepMessages;","\nconst svEdstepMessages = {\n    \"termsAndConditionsLink\": \"EdSteps villkor\",\n    \"termsAndConditionsPopupTitle\": \"EdStep-villkor\"\n};\n\nexport default svEdstepMessages;","\nconst enLearnplaygroundMessages = {\n    \"termsAndConditionsLink\": \"Learn Playground Terms and Conditions\",\n    \"termsAndConditionsPopupTitle\": \"Learn Playground Terms and Conditions\"\n};\n\nexport default enLearnplaygroundMessages;","\nconst nbLearnplaygroundMessages = {\n    \"termsAndConditionsLink\": \"vilkår og bestemmelser for Learn Playground\",\n    \"termsAndConditionsPopupTitle\": \"Learn Playground vilkår og bestemmelser\"\n};\n\nexport default nbLearnplaygroundMessages;","\nconst svLearnplaygroundMessages = {\n    \"termsAndConditionsLink\": \"Learn Playgrounds villkor\",\n    \"termsAndConditionsPopupTitle\": \"Learn Playground-villkor\"\n};\n\nexport default svLearnplaygroundMessages;","\nconst enEdplanMessages = {\n    \"termsAndConditionsLink\": \"EdPlan Terms and Conditions\",\n    \"termsAndConditionsPopupTitle\": \"EdPlan Terms and Conditions\"\n};\n\nexport default enEdplanMessages;","\nconst nbEdplanMessages = {\n    \"termsAndConditionsLink\": \"vilkår og bestemmelser for EdPlan\",\n    \"termsAndConditionsPopupTitle\": \"EdPlan vilkår og bestemmelser\"\n};\n\nexport default nbEdplanMessages;","\nconst svEdplanMessages = {\n    \"termsAndConditionsLink\": \"EdPlans villkor\",\n    \"termsAndConditionsPopupTitle\": \"EdPlans-villkor\"\n};\n\nexport default svEdplanMessages;","import {addLocaleData} from 'react-intl';\nimport en from 'react-intl/locale-data/en';\nimport nb from 'react-intl/locale-data/nb';\nimport nn from 'react-intl/locale-data/nn';\nimport sv from 'react-intl/locale-data/sv';\n\nimport nbMessages from './lang/nb';\nimport svMessages from './lang/sv';\n\nimport enEdstepMessages from './lang/theme/edstep/en';\nimport nbEdstepMessages from './lang/theme/edstep/nb';\nimport svEdstepMessages from './lang/theme/edstep/sv';\n\nimport enLearnplaygroundMessages from './lang/theme/learnplayground/en';\nimport nbLearnplaygroundMessages from './lang/theme/learnplayground/nb';\nimport svLearnplaygroundMessages from './lang/theme/learnplayground/sv';\n\nimport enEdplanMessages from './lang/theme/edplan/en';\nimport nbEdplanMessages from './lang/theme/edplan/nb';\nimport svEdplanMessages from './lang/theme/edplan/sv';\n\naddLocaleData([...en, ...nb, ...nn, ...sv]);\n\nconst messages = {\n    \"nb\": nbMessages,\n    \"sv\": svMessages\n};\nconst themes = {\n    \"edstep\": {\n        \"en\": enEdstepMessages,\n        \"nb\": nbEdstepMessages,\n        \"sv\": svEdstepMessages\n    },\n    \"learnplayground\": {\n        \"en\": enLearnplaygroundMessages,\n        \"nb\": nbLearnplaygroundMessages,\n        \"sv\": svLearnplaygroundMessages\n    },\n    \"edplan\": {\n        \"en\": enEdplanMessages,\n        \"nb\": nbEdplanMessages,\n        \"sv\": svEdplanMessages\n    }\n};\n\nconst getMessages = function (lang, theme) {\n    let m = {};\n    if (messages.hasOwnProperty(lang)) {\n        m = messages[lang];\n    }\n    /*\n     * Let the theme override default messages\n     */\n    if (themes.hasOwnProperty(theme)) {\n        let t = themes[theme];\n        if (t.hasOwnProperty(lang)) {\n            t = t[lang];\n            for (let k in t) {\n                if (t.hasOwnProperty(k)) {\n                    m[k] = t[k];\n                }\n            }\n        }\n    }\n\n    return m;\n};\n\nexport default getMessages;\n","import React, { Component } from 'react';\nimport {Button} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nclass TermsAndConditions extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            \"termsAndConditions\": typeof(props.termsAndConditions) !== \"undefined\" ? props.termsAndConditions : \"\"\n        };\n\n        this.onAccept = typeof(props.onAccept) !== \"undefined\" ? props.onAccept : () => {};\n        this.onDecline = typeof(props.onDecline) !== \"undefined\" ? props.onDecline : () => {};\n\n        this.domKey = \"\"+Math.random();\n    }\n\n    insertTermsAndConditions() {\n        var element = document.getElementById(\"terms-and-conditions-text\" + this.domKey);\n        if (typeof(element) !== \"undefined\") {\n            element.innerHTML = this.state.termsAndConditions;\n        }\n    }\n\n    componentDidMount() {\n        this.insertTermsAndConditions();\n    }\n\n    componentDidUpdate() {\n        this.insertTermsAndConditions();\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"terms-and-conditions-text-and-title\">\n                    <h1>\n                        <FormattedMessage\n                            id=\"termsAndConditionsPopupTitle\"\n                            defaultMessage=\"Terms and Conditions\"\n                        />\n                    </h1>\n                    <div id={\"terms-and-conditions-text\" + this.domKey} className=\"terms-and-conditions-text-area\"></div>\n                </div>\n                <div className=\"terms-and-conditions-buttons\">\n                    <Button onClick={() => {this.onAccept();}} className=\"btn btn-success terms-and-conditions-buttons\">\n                        <FormattedMessage\n                            id=\"iAgreeButton\"\n                            defaultMessage=\"I Agree\"\n                        />\n                    </Button>\n                    <Button onClick={() => {this.onDecline();}} className=\"btn btn-danger terms-and-conditions-buttons\">\n                        <FormattedMessage\n                            id=\"iDoNotAgreeButton\"\n                            defaultMessage=\"I Do Not Agree\"\n                        />\n                    </Button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default TermsAndConditions;\n","\nimport querystring from 'querystring';\nimport axios from 'axios';\n\nconst messages = {\n    failedToAcceptTermsAndConditions: {\n        'id': 'failedToAcceptTermsAndConditions',\n        'defaultMessage': \"Failed to accept terms and conditions\"\n    },\n    errorCodeAcceptTermsAndConditions: {\n        'id': 'errorCodeAcceptTermsAndConditions',\n        'defaultMessage': \"Error response code {code} on accept terms and conditions. Please try again later.\"\n    },\n    failedToRunAuthorize: {\n        'id': 'failedToRunAuthorize',\n        'defaultMessage': \"Failed to run authorize request\"\n    },\n    errorCodeAuthorize: {\n        'id': 'errorCodeAuthorize',\n        'defaultMessage': \"Error response code {code} on authorize endpoint. Please try again later.\"\n    },\n    unexpectedAuthorizeResponse: {\n        'id': 'unexpectedAuthorizeResponse',\n        'defaultMessage': 'Network error, please try again'\n    },\n    autoLinkAccountFailure: {\n        'id': 'autoLinkAccountFailure',\n        'defaultMessage': 'Auto link account failure'\n    },\n    strangeResponseAutoLinkAccount: {\n        'id': 'strangeResponseAutoLinkAccount',\n        'defaultMessage': 'Strange response from auto link account endpoint'\n    },\n    autoLinkDidNotIncludeIdentity: {\n        'id': 'autoLinkDidNotIncludeIdentity',\n        'defaultMessage': 'Auto link account did not include an identity id in the response'\n    },\n    finalStepInLoginFailed: {\n        'id': 'finalStepInLoginFailed',\n        'defaultMessage': 'Final step in login process failed'\n    },\n    finalStepInLoginFailedProduceJwt: {\n        'id': 'finalStepInLoginFailedProduceJwt',\n        'defaultMessage': 'Final login step did not produce a JWT'\n    },\n    termsAndConditionsStatusFailed: {\n        'id': 'termsAndConditionsStatusFailed',\n        'defaultMessage': \"Terms and conditions status request failed\"\n    }\n};\n\nclass LoginOperations {\n    constructor(props) {\n        this.intl = props.intl;\n        this.authorizationCodeCallback = typeof(props.authorizationCodeCallback) === 'function' ? props.authorizationCodeCallback : undefined;\n        this.authBaseUri = props.authBaseUri;\n        this.clientId = props.clientId;\n        this.codeAuthorizeUri = props.codeAuthorizeUri;\n        this.onEmailConflict = typeof(props.onEmailConflict) === 'function' ? props.onEmailConflict : function (payload, intermediateToken) {};\n        this.onTermsAndConditions = typeof(props.onTermsAndConditions) === 'function' ? props.onTermsAndConditions : function (jwt, termsAndConditions) {};\n    }\n\n    loggedIn(language, jwt) {\n        const {formatMessage} = this.intl;\n\n        var clientId = this.clientId;\n        axios.get(this.authBaseUri+\"/v1/login/termsandconditions/status?\"+querystring.stringify({\"clientId\": clientId, \"language\": language}), {\n                'headers' : {\n                    'Authorization': 'Bearer '+jwt\n                }\n            }\n        )\n            .then((response) => {\n                var tcStatus = response.data;\n                var accepted = typeof(tcStatus) !== \"undefined\" && typeof(tcStatus.accepted) !== \"undefined\" && tcStatus.accepted;\n                var termsAndConditions = typeof(tcStatus) !== \"undefined\" && typeof(tcStatus.termsAndConditions) !== \"undefined\" && tcStatus.termsAndConditions ? tcStatus.termsAndConditions : \"\";\n                if (accepted) {\n                    this.authorize(jwt);\n                } else {\n                    this.onTermsAndConditions(jwt, termsAndConditions);\n                    //this.setState({\n                    //    \"mode\": \"termsandconditions\",\n                    //    \"jwt\": jwt,\n                    //    \"termsAndConditions\": termsAndConditions\n                    //});\n                }\n            })\n            .catch((error) => {\n                alert(formatMessage(messages.termsAndConditionsStatusFailed));\n            });\n    }\n\n    loginWithIdentity(language, intermediateToken, identityId) {\n        const {formatMessage} = this.intl;\n\n        axios.post(\n            this.authBaseUri+'/v1/login/complete', querystring.stringify({}), {\n                'headers' : {\n                    'Authorization': 'Bearer '+intermediateToken\n                },\n                'xsrfCookieName': null,\n                'withCredentials': true\n            }\n        )\n            .then((response) => {\n                var loginResponse = response.data;\n                var jwt = loginResponse.jwt;\n                if (typeof(jwt) !== 'undefined' && jwt) {\n                    this.loggedIn(language, jwt);\n                } else {\n                    alert(formatMessage(messages.finalStepInLoginFailedProduceJwt));\n                }\n            })\n            .catch((error) => {\n                alert(formatMessage(messages.finalStepInLoginFailed));\n            });\n    }\n    autoConnectIdentity(language, intermediateToken) {\n        const {formatMessage} = this.intl;\n\n        axios.post(\n            this.authBaseUri+'/v1/login/idconnect/auto', querystring.stringify({}), {\n                'headers' : {\n                    'Authorization': 'Bearer '+intermediateToken\n                }\n            }\n        )\n            .then((response) => {\n                var accountData = response.data;\n                var identities = accountData.identities;\n                if (typeof(identities) !== 'undefined' && identities.length === 1) {\n                    var identity = identities[0];\n                    var identityId = identity.id;\n                    if (typeof(identityId) !== 'undefined' && identityId) {\n                        this.loginWithIdentity(language, intermediateToken, identityId);\n                    } else {\n                        alert(formatMessage(messages.autoLinkDidNotIncludeIdentity));\n                    }\n                } else {\n                    alert(formatMessage(messages.strangeResponseAutoLinkAccount));\n                }\n            })\n            .catch((error) => {\n                if (error.response && error.response.status === 409) {\n                    /* 409=conflict */\n                    const payload = error.response.data;\n                    if (payload && typeof(payload.length) !== \"undefined\" && payload.length > 0) {\n                        const item = payload[0];\n                        if (\n                            item &&\n                            typeof(item.credentialsId) !== \"undefined\" &&\n                            typeof(item.email) !== \"undefined\" &&\n                            item.type === \"email-conflict\" &&\n                            typeof(item.conflictingIdentity) !== \"undefined\" &&\n                            typeof(item.conflictingIdentity.id) !== \"undefined\"\n                        ) {\n                            this.onEmailConflict(payload, intermediateToken);\n                            //this.setState({\"idpEmailConflict\": payload, \"idpEmailToken\": intermediateToken});\n                            return;\n                        }\n                    }\n                }\n                alert(formatMessage(messages.autoLinkAccountFailure));\n            });\n    }\n\n    authorize(intermediateToken) {\n        const {formatMessage} = this.intl;\n\n        var codeAuthorizeUri = this.codeAuthorizeUri;\n        axios.get(\n            this.authBaseUri+codeAuthorizeUri, {\n                'headers': {\n                    'Authorization': 'Bearer ' + intermediateToken\n                }\n            }\n        )\n            .then((response) => {\n                var authorizeData = response.data;\n                if (typeof(authorizeData) !== 'undefined' && typeof(authorizeData.type) !== 'undefined' && authorizeData.type === 'redirect' && typeof(authorizeData.redirect) !== 'undefined') {\n                    this.authorizationRedirect(authorizeData.redirect);\n                } else {\n                    alert(formatMessage(messages.unexpectedAuthorizeResponse));\n                }\n            })\n            .catch((error) => {\n                var response = error.response;\n                if (typeof(response) !== 'undefined') {\n                    alert(formatMessage(messages.errorCodeAuthorize, {'code': response.status}));\n                } else {\n                    alert(formatMessage(messages.failedToRunAuthorize));\n                }\n            })\n    }\n\n    authorizationRedirect(redirect) {\n        if (typeof(this.authorizationCodeCallback) === 'function') {\n            const queryPos = redirect.indexOf('?');\n            let params = {};\n            if (queryPos >= 0) {\n                const query = redirect.substring(queryPos + 1);\n                const pairs = query.split('&')\n                    .map(function (pair) {\n                        const eqPos = pair.indexOf('=');\n                        if (eqPos >= 0) {\n                            return [pair.substring(0, eqPos), pair.substring(eqPos + 1)];\n                        } else {\n                            return [pair, ''];\n                        }\n                    })\n                    .map(function (pair) {\n                        return pair.map(decodeURIComponent);\n                    });\n                pairs.forEach((pair) => {\n                    params[pair[0]] = pair[1];\n                });\n            }\n            if (typeof(params.code) !== 'undefined' && params.code) {\n                this.authorizationCodeCallback(params.code);\n                return;\n            }\n\n        }\n        window.location.href = redirect;\n    }\n\n    acceptTermsAndConditions(jwt) {\n        const {formatMessage} = this.intl;\n\n        var clientId = this.clientId;\n        axios.post(this.authBaseUri+\"/v1/login/termsandconditions/accept\", querystring.stringify({\n            \"clientId\": clientId,\n            \"accepted\": true\n        }), {\n            'headers' : {\n                'Authorization': 'Bearer '+jwt\n            }\n        })\n            .then((response) => {\n                this.authorize(jwt);\n            })\n            .catch((error) => {\n                var response = error.response;\n                if (typeof(response) !== 'undefined') {\n                    alert(formatMessage(messages.errorCodeAcceptTermsAndConditions, {'code': response.status}));\n                } else {\n                    alert(formatMessage(messages.failedToAcceptTermsAndConditions));\n                }\n            });\n    }\n}\n\nexport default LoginOperations;\n","module.exports = __webpack_public_path__ + \"static/media/emblemhvit-01.cb1f3ee1.png\";","import React, { Component } from 'react';\n\nimport {FormattedMessage, intlShape, injectIntl, defineMessages} from 'react-intl';\n\nconst messages = defineMessages({\n    loginButton: {\n        'id': 'loginButton',\n        'defaultMessage': 'Log in'\n    },\n    usernamePlaceholder: {\n        'id': 'usernamePlaceholder',\n        'defaultMessage': '(Username or email)'\n    },\n    passwordPlaceholder: {\n        'id': 'passwordPlaceholder',\n        'defaultMessage': '(Password)'\n    }\n});\n\nclass UserPasswordLogin extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            \"loginError\": typeof(props.loginError) !== \"undefined\" ? props.loginError : false\n        };\n\n        this.onLogin = typeof(props.onLogin) !== 'undefined' ? props.onLogin : (username, password) => {};\n        this.onForgotPassword = typeof(props.onForgotPassword) !== 'undefined' ? props.onForgotPassword : () => {};\n        this.onSignup = typeof(props.onSignup) !== 'undefined' ? props.onSignup : null;\n\n        this.username = typeof(props.username) !== \"undefined\" ? props.username : \"\";\n        this.password = typeof(props.password) !== \"undefined\" ? props.password : \"\";\n\n        this.usernameFieldDisabled = typeof(this.props.usernameFieldDisabled) !== 'undefined' ? this.props.usernameFieldDisabled : false;\n\n        this.domKey = \"\"+Math.random();\n    }\n\n    clickLogIn(event) {\n        var username = document.getElementById('username' + this.domKey).value;\n        var password = document.getElementById('password' + this.domKey).value;\n        event.preventDefault();\n        this.onLogin(username, password);\n        return false;\n    }\n\n    clickForgotPassword(event) {\n        event.preventDefault();\n        this.onForgotPassword();\n        return false;\n    }\n\n    clickSignup(event) {\n        event.preventDefault();\n        this.onSignup();\n        return false;\n    }\n\n    componentDidMount() {\n        document.getElementById('username' + this.domKey).value = this.username;\n        document.getElementById('password' + this.domKey).value = this.password;\n    }\n\n    render() {\n        const {formatMessage} = this.props.intl;\n\n        return (\n            <form onSubmit={(event) => { return this.clickLogIn(event); }} method=\"POST\">\n                {\n                    (() => {\n                        if (this.state.loginError) {\n                            return (\n                                <div className=\"error col-sm-12 alert alert-danger\">\n                                    <FormattedMessage id=\"loginFailedError\" defaultMessage=\"Login failed! Please check your username and password.\" />\n                                </div>\n                            );\n                        } else {\n                            return (\n                                <span></span>\n                            );\n                        }\n                    })()\n                }\n                <input key=\"username-can-change\" className=\"col-sm-12\" placeholder={formatMessage(messages.usernamePlaceholder)} type=\"text\" id={\"username\" + this.domKey} name=\"username\" disabled={ this.usernameFieldDisabled ? 'disabled' : undefined} />\n                <input key=\"password-can-change\" className=\"col-sm-12\" placeholder={formatMessage(messages.passwordPlaceholder)} type=\"password\" id={\"password\" + this.domKey} name=\"password\" />\n                <input className=\"col-sm-12\" onClick={(event) => { return this.clickLogIn(event); }} type=\"submit\" value={formatMessage(messages.loginButton)} />\n\n                <p className=\"formlinks\">\n                    <a onClick={(event) => { return this.clickForgotPassword(event); }} href=\"#\" className=\"float-left\">\n                        <FormattedMessage\n                            id=\"forgotPasswordLink\"\n                            defaultMessage=\"Forgot password?\"\n                        />\n                    </a>\n                    {(() => {\n                        if (this.onSignup !== null) {\n                            return (\n                                <a onClick={(event) => { return this.clickSignup(event); }} href=\"#\" className=\"float-right\">\n                                    <FormattedMessage\n                                        id=\"createNewAccountLink\"\n                                        defaultMessage=\"Create new account\"\n                                    />\n                                </a>\n                            );\n                        } else {\n                            return null;\n                        }\n                    })()}\n                </p>\n            </form>\n        );\n    }\n}\n\nUserPasswordLogin.propTypes = {\n    intl: intlShape.isRequired,\n};\n\nexport default injectIntl(UserPasswordLogin);\n","import React, { Component } from 'react';\nimport {Modal, ModalBody, ModalFooter, ModalHeader, ModalTitle, Button} from 'react-bootstrap';\nimport {FormattedMessage, intlShape, injectIntl, defineMessages} from 'react-intl';\nimport Loader from 'react-loader-spinner';\n\nconst messages = defineMessages({\n    acceptTermsAndConditionsError: {\n        'id': 'acceptTermsAndConditionsError',\n        'defaultMessage': 'You need to accept the Terms and Conditions.'\n    },\n    emailRequiredError:{\n        'id': 'emailRequiredError',\n        'defaultMessage': 'Email address is required.'\n    },\n    passwordRequiredError:{\n        'id': 'passwordRequiredError',\n        'defaultMessage': 'Password is required.'\n    },\n    passwordsDoNotMatchError:{\n        'id': 'passwordsDoNotMatchError',\n        'defaultMessage': 'Passwords do not match.'\n    },\n    signupEmailFieldPlaceholder: {\n        'id': 'signupEmailFieldPlaceholder',\n        'defaultMessage': '(E-Mail)'\n    },\n    signupPasswordFieldPlaceholder: {\n        'id': 'signupPasswordFieldPlaceholder',\n        'defaultMessage': '(Choose a password)'\n    },\n    signupRepeatPasswordFieldPlaceholder: {\n        'id': 'signupRepeatPasswordFieldPlaceholder',\n        'defaultMessage': '(Repeat password)'\n    },\n    signupButton: {\n        'id': 'signupButton',\n        'defaultMessage': 'Sign up'\n    }\n});\n\nclass SignupForm extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            \"showTermsAndConditions\": false,\n            \"termsAndConditions\": typeof(props.termsAndConditions) !== \"undefined\" ? props.termsAndConditions : false,\n            \"errors\": typeof(props.errors) !== \"undefined\" ? props.errors : {},\n            \"spinner\": this.props.autoSubmit && (typeof(props.errors) === \"undefined\" || !props.errors)\n        };\n\n        this.onLogin = typeof(props.onLogin) !== \"undefined\" ? props.onLogin : () => {};\n        this.onSignup = typeof(props.onSignup) !== \"undefined\" ? props.onSignup : (email, password, termsAndConditionsAccepted) => {};\n        this.onTermsAndConditionsRequired = typeof(props.onTermsAndConditionsRequired) !== 'undefined' ? props.onTermsAndConditionsRequired : (termsAndConditions, callback) => { callback(false); };\n\n        this.domKey = \"\"+Math.random();\n\n        this.prefillDone = false;\n        this.autoSubmitDone = false;\n        this.fields = typeof(props.fields) !== \"undefined\" ? props.fields : {};\n    }\n\n    clickSignup(event) {\n        const {formatMessage} = this.props.intl;\n\n        if (event !== null) {\n            event.preventDefault();\n        }\n        this.setState({\"spinner\": true});\n        const email = document.getElementById(\"email\" + this.domKey).value;\n        const password = !this.props.withoutPassword ? document.getElementById(\"password\" + this.domKey).value : null;\n        let termsAndConditions = false;\n        if (this.state.termsAndConditions !== false) {\n            termsAndConditions = document.getElementById(\"termsAndConditions\" + this.domKey).checked;\n        }\n\n        if (!(() => {\n            let ok = true;\n            let errors = {};\n            if (!email) {\n                errors.email = formatMessage(messages.emailRequiredError);\n                ok = false;\n            }\n            if (!this.props.withoutPassword) {\n                if (!password) {\n                    errors.password = formatMessage(messages.passwordRequiredError);\n                    ok = false;\n                } else {\n                    const repeatPassword = document.getElementById(\"repeatpassword\" + this.domKey).value;\n                    if (password !== repeatPassword) {\n                        errors.password = formatMessage(messages.passwordsDoNotMatchError);\n                        ok = false;\n                    }\n                }\n            }\n            if (this.state.termsAndConditions !== false) {\n                if (!termsAndConditions) {\n                    /*\n                     * Auto submit, and T&C is the only thing missing:\n                     */\n                    if (ok && this.props.autoSubmit && event === null) {\n                        this.setState({\"spinner\": true});\n                        this.onTermsAndConditionsRequired(this.state.termsAndConditions, (accepted) => {\n                            if (accepted) {\n                                this.onSignup(email, password, true);\n                                this.setState({\"spinner\": false});\n                            } else {\n                                this.setState({\"spinner\": false});\n                            }\n                        });\n                    }\n                    errors.termsAndConditions = formatMessage(messages.acceptTermsAndConditionsError);\n                    ok = false;\n                }\n            }\n            if (!ok) {\n                this.setState({\n                    'errors': errors\n                });\n            }\n            return ok;\n        })()) {\n            this.setState({\"spinner\": false});\n            return;\n        }\n\n        this.onSignup(email, password, termsAndConditions);\n        this.setState({\"spinner\": false});\n    }\n\n    clickLogin(event) {\n        event.preventDefault();\n        this.onLogin();\n    }\n\n    setPasswordFieldType(type) {\n        var fields = document.getElementsByClassName(\"password-field\");\n        for (var i = 0; fields.length; i++) {\n            fields.item(i).type = type;\n        }\n    }\n    showPasswords() {\n        this.setPasswordFieldType('text');\n    }\n    hidePasswords() {\n        this.setPasswordFieldType('password');\n    }\n\n    showTermsAndConditions(event) {\n        event.preventDefault();\n        this.setState({\"showTermsAndConditions\": true});\n    }\n\n    termsAndConditionsInnerHtml() {\n        var element = document.getElementById(\"terms-and-conditions-text\" + this.domKey);\n        if (typeof(element) !== \"undefined\" && element) {\n            element.innerHTML = this.state.termsAndConditions;\n        }\n    }\n\n    static isEmptyObject(object) {\n        if (typeof(Array.isArray) !== 'undefined' && Array.isArray(object) && object.length === 0) {\n            return true;\n        }\n        for (var prop in object) {\n            if (object.hasOwnProperty(prop)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    prefill() {\n        const emailField = document.getElementById(\"email\" + this.domKey);\n        if (!this.prefillDone && typeof(emailField) !== 'undefined' && emailField) {\n            this.prefillDone = true;\n            if (typeof(this.fields.email) !== \"undefined\") {\n                emailField.value = this.fields.email;\n            }\n            const passwordField = document.getElementById(\"password\" + this.domKey);\n            if (typeof(this.fields.password) !== \"undefined\" && typeof(passwordField) !== 'undefined' && passwordField) {\n                passwordField.value = this.fields.password;\n                document.getElementById(\"repeatpassword\" + this.domKey).value = this.fields.password;\n            }\n        }\n    }\n\n    componentDidMount() {\n        this.prefill();\n        this.termsAndConditionsInnerHtml();\n\n        if (this.props.autoSubmit && (typeof(this.props.errors) === \"undefined\" || SignupForm.isEmptyObject(this.props.errors)) && !this.autoSubmitDone) {\n            this.autoSubmitDone = true;\n            this.clickSignup(null);\n        }\n    }\n\n    componentDidUpdate() {\n        this.prefill();\n        this.termsAndConditionsInnerHtml();\n    }\n\n    getAppRoot() {\n       var candidates = document.getElementsByClassName('reactive-auth-login');\n       if (candidates.length > 0) {\n           return candidates.item(0);\n       } else {\n           return document.body;\n       }\n    }\n\n    renderPasswordFields() {\n        const {formatMessage} = this.props.intl;\n\n        return (\n            <div>\n                <input className=\"col-sm-5 password-field\" type=\"password\" id={\"password\" + this.domKey} placeholder={formatMessage(messages.signupPasswordFieldPlaceholder)} name=\"password\" />\n                <input className=\"col-sm-5 password-field\" type=\"password\" id={\"repeatpassword\" + this.domKey} placeholder={formatMessage(messages.signupRepeatPasswordFieldPlaceholder)} name=\"repeatpassword\" />\n                <div className=\"col-sm-2 eyeholder\" onMouseDown={() => {this.showPasswords();}} onMouseUp={() => {this.hidePasswords();}} onMouseOut={() => {this.hidePasswords();}}></div>\n\n                <p className=\"terms\">\n                    <FormattedMessage\n                        id=\"signupPasswordRequirements\"\n                        defaultMessage=\"*Passwords must be minimum 6 characters long.\"\n                    />\n                </p>\n            </div>\n        );\n    }\n\n    render() {\n        const {formatMessage} = this.props.intl;\n\n        if (this.state.spinner) {\n            return (\n                <Loader\n                    type=\"ThreeDots\"\n                    color=\"#00BFFF\"\n                    height=\"200\"\n                    width=\"200\"\n                />\n            );\n        }\n        const formElementsStyle = {'display': this.props.visible ? 'block' : 'none'};\n        return (\n            <form method=\"post\" onSubmit={(event) => { this.clickSignup(event); }}>\n                <div style={formElementsStyle}>\n                    {\n                        (() => {\n                            if (typeof(this.state.errors) !== \"undefined\" && typeof(this.state.errors.email) !== \"undefined\") {\n                                return (\n                                    <div className=\"error col-sm-12 alert alert-danger\">{this.state.errors.email}</div>\n                                );\n                            } else {\n                                return ( <span></span> );\n                            }\n                        })()\n                    }\n\n                    <input className=\"col-sm-12\" type=\"text\" id={\"email\" + this.domKey} placeholder={formatMessage(messages.signupEmailFieldPlaceholder)} name=\"email\" />\n\n                    {\n                        (() => {\n                            if (typeof(this.state.errors) !== \"undefined\" && typeof(this.state.errors.password) !== \"undefined\") {\n                                return (\n                                    <div className=\"error col-sm-12 alert alert-danger\">{this.state.errors.password}</div>\n                                );\n                            } else {\n                                return ( <span></span> );\n                            }\n                        })()\n                    }\n\n                    {\n                        (() => {\n                            if (!this.props.withoutPassword) {\n                                return this.renderPasswordFields();\n                            } else {\n                                return ( <span></span> );\n                            }\n                        })()\n                    }\n                    {\n                        (() => {\n                            if (this.state.termsAndConditions !== false) {\n                                return (\n                                    <div className=\"terms\">\n                                        {\n                                            (() => {\n                                                if (typeof(this.state.errors) !== \"undefined\" && typeof(this.state.errors.termsAndConditions) !== \"undefined\") {\n                                                    return (\n                                                        <div\n                                                            className=\"error col-sm-12 alert alert-danger\">{this.state.errors.termsAndConditions}</div>\n                                                    );\n                                                } else {\n                                                    return (<span></span>);\n                                                }\n                                            })()\n                                        }\n\n                                        <div className=\"terms-field\">\n                                            <label className=\"terms\">\n                                                <input type=\"checkbox\" id={\"termsAndConditions\" + this.domKey} name=\"termsAndConditions\"\n                                                                                value=\"true\"/>\n                                                <FormattedMessage\n                                                    id=\"signupTermsAndConditionsLabel\"\n                                                    defaultMessage={'I agree to the {termsAndConditions}'}\n                                                    values={{\n                                                        \"termsAndConditions\": <a onClick={(event) => { this.showTermsAndConditions(event); }}\n                                                                                 id=\"terms-and-conditions-link\"\n                                                                                 href=\"/termsofservice\"\n                                                                                 target=\"_blank\">\n                                                            <FormattedMessage id=\"termsAndConditionsLink\" defaultMessage=\"Terms and Conditions\"/>\n                                                        </a>\n                                                    }}\n                                                />\n                                            </label>\n                                        </div>\n\n                                        <Modal show={this.state.showTermsAndConditions} onShow={() => { this.termsAndConditionsInnerHtml(); }} container={this.getAppRoot()}>\n                                            <ModalTitle>\n                                                <h2 className=\"terms-and-conditions-title\">\n                                                    <FormattedMessage id=\"termsAndConditionsPopupTitle\" defaultMessage=\"Terms and Conditions\"/>\n                                                </h2>\n                                            </ModalTitle>\n                                            <ModalBody>\n                                                <div id={\"terms-and-conditions-text\" + this.domKey} className=\"terms-and-conditions-text\"></div>\n                                            </ModalBody>\n                                            <ModalFooter>\n                                                <Button onClick={(event) => { this.setState({\"showTermsAndConditions\": false}); }} className=\"bt btn-success\">\n                                                    <FormattedMessage id=\"closeButton\" defaultMessage=\"Close\" />\n                                                </Button>\n                                            </ModalFooter>\n                                        </Modal>\n                                    </div>\n                                );\n                            } else {\n                                return ( <span></span> );\n                            }\n                        })()\n                    }\n\n                    <div>\n                        <input type=\"submit\" value={formatMessage(messages.signupButton)}/>\n                    </div>\n                </div>\n\n                <p className=\"center-text\" style={formElementsStyle}>\n                    <FormattedMessage\n                        id=\"alreadyHaveAnAccount\"\n                        defaultMessage={'Already have an account? {logInHereLink}'}\n                        values={{\n                            \"logInHereLink\": <a onClick={(event) => {this.clickLogin(event);}} href=\"/login\">\n                                <FormattedMessage id=\"logInHereLink\" defaultMessage=\"Log in here\" />\n                            </a>\n                        }}\n                    />\n                </p>\n\n            </form>\n        );\n    }\n}\n\nSignupForm.propTypes = {\n    intl: intlShape.isRequired,\n};\n\nexport default injectIntl(SignupForm);\n","import React, { Component } from 'react';\nimport {Modal, ModalBody, ModalFooter, ModalHeader, ModalTitle, Button} from 'react-bootstrap';\nimport {FormattedMessage, intlShape, injectIntl, defineMessages} from 'react-intl';\nimport Loader from 'react-loader-spinner';\n\nconst messages = defineMessages({\n    acceptTermsAndConditionsError: {\n        'id': 'acceptTermsAndConditionsError',\n        'defaultMessage': 'You need to accept the Terms and Conditions.'\n    },\n    passwordRequiredError:{\n        'id': 'passwordRequiredError',\n        'defaultMessage': 'Password is required.'\n    },\n    passwordsDoNotMatchError:{\n        'id': 'passwordsDoNotMatchError',\n        'defaultMessage': 'Passwords do not match.'\n    },\n    signupPasswordFieldPlaceholder: {\n        'id': 'signupPasswordFieldPlaceholder',\n        'defaultMessage': '(Choose a password)'\n    },\n    signupRepeatPasswordFieldPlaceholder: {\n        'id': 'signupRepeatPasswordFieldPlaceholder',\n        'defaultMessage': '(Repeat password)'\n    },\n    signupButton: {\n        'id': 'signupButton',\n        'defaultMessage': 'Sign up'\n    }\n});\n\nclass SignupVerifiedEmailForm extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            \"showTermsAndConditions\": false,\n            \"termsAndConditions\": typeof(props.termsAndConditions) !== \"undefined\" ? props.termsAndConditions : false,\n            \"errors\": typeof(props.errors) !== \"undefined\" ? props.errors : {},\n            \"spinner\": this.props.autoSubmit && (typeof(props.errors) === \"undefined\" || !props.errors)\n        };\n\n        this.onLogin = typeof(props.onLogin) !== \"undefined\" ? props.onLogin : () => {};\n        this.onSignup = typeof(props.onSignup) !== \"undefined\" ? props.onSignup : (password, termsAndConditionsAccepted) => {};\n        this.onTermsAndConditionsRequired = typeof(props.onTermsAndConditionsRequired) !== 'undefined' ? props.onTermsAndConditionsRequired : (termsAndConditions, callback) => { callback(false); };\n\n        this.domKey = \"\"+Math.random();\n\n        this.prefillDone = false;\n        this.fields = typeof(props.fields) !== \"undefined\" ? props.fields : {};\n    }\n\n    clickSignup(event) {\n        const {formatMessage} = this.props.intl;\n\n        if (event !== null) {\n            event.preventDefault();\n        }\n        const password = !this.props.withoutPassword ? document.getElementById(\"password\" + this.domKey).value : null;\n        let termsAndConditions = false;\n        if (this.state.termsAndConditions !== false) {\n            termsAndConditions = document.getElementById(\"termsAndConditions\" + this.domKey).checked;\n        }\n\n        if (!(() => {\n            let ok = true;\n            let errors = {};\n            if (!this.props.withoutPassword) {\n                if (!password) {\n                    errors.password = formatMessage(messages.passwordRequiredError);\n                    ok = false;\n                } else {\n                    const repeatPassword = document.getElementById(\"repeatpassword\" + this.domKey).value;\n                    if (password !== repeatPassword) {\n                        errors.password = formatMessage(messages.passwordsDoNotMatchError);\n                        ok = false;\n                    }\n                }\n            }\n            if (this.state.termsAndConditions !== false) {\n                if (!termsAndConditions) {\n                    /*\n                     * Auto submit, and T&C is the only thing missing:\n                     */\n                    if (ok && this.props.autoSubmit && event === null) {\n                        this.setState({\"spinner\": true});\n                        this.onTermsAndConditionsRequired(this.state.termsAndConditions, (accepted) => {\n                            if (accepted) {\n                                this.onSignup(password, true);\n                                this.setState({\"spinner\": false});\n                            } else {\n                                this.setState({\"spinner\": false});\n                            }\n                        });\n                    }\n                    errors.termsAndConditions = formatMessage(messages.acceptTermsAndConditionsError);\n                    ok = false;\n                }\n            }\n            if (!ok) {\n                this.setState({\n                    'errors': errors\n                });\n            }\n            return ok;\n        })()) {\n            this.setState({\"spinner\": false});\n            return;\n        }\n\n        this.onSignup(password, termsAndConditions);\n        this.setState({\"spinner\": false});\n    }\n\n    clickLogin(event) {\n        event.preventDefault();\n        this.onLogin();\n    }\n\n    setPasswordFieldType(type) {\n        var fields = document.getElementsByClassName(\"password-field\");\n        for (var i = 0; fields.length; i++) {\n            fields.item(i).type = type;\n        }\n    }\n    showPasswords() {\n        this.setPasswordFieldType('text');\n    }\n    hidePasswords() {\n        this.setPasswordFieldType('password');\n    }\n\n    showTermsAndConditions(event) {\n        event.preventDefault();\n        this.setState({\"showTermsAndConditions\": true});\n    }\n\n    static isEmptyObject(object) {\n        if (typeof(Array.isArray) !== 'undefined' && Array.isArray(object) && object.length === 0) {\n            return true;\n        }\n        for (var prop in object) {\n            if (object.hasOwnProperty(prop)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    prefill() {\n        const passwordField = document.getElementById(\"password\" + this.domKey);\n        if (!this.prefillDone && typeof(passwordField) !== 'undefined' && passwordField) {\n            this.prefillDone = true;\n            if (typeof(this.fields.password) !== \"undefined\") {\n                passwordField.value = this.fields.password;\n                document.getElementById(\"repeatpassword\" + this.domKey).value = this.fields.password;\n            }\n        }\n    }\n\n    termsAndConditionsInnerHtml() {\n        var element = document.getElementById(\"terms-and-conditions-text\" + this.domKey);\n        if (typeof(element) !== \"undefined\" && element) {\n            element.innerHTML = this.state.termsAndConditions;\n        }\n    }\n\n    componentDidMount() {\n        this.prefill();\n        this.termsAndConditionsInnerHtml();\n\n        if (this.props.autoSubmit && (typeof(this.props.errors) === \"undefined\" || SignupVerifiedEmailForm.isEmptyObject(this.props.errors)) && !this.autoSubmitDone) {\n            this.autoSubmitDone = true;\n            this.clickSignup(null);\n        }\n    }\n\n    componentDidUpdate() {\n        this.prefill();\n        this.termsAndConditionsInnerHtml();\n    }\n\n    renderPasswordFields() {\n        const {formatMessage} = this.props.intl;\n\n        return (\n            <div>\n                <input className=\"col-sm-5 password-field\" type=\"password\" id={\"password\" + this.domKey} placeholder={formatMessage(messages.signupPasswordFieldPlaceholder)} name=\"password\" />\n                <input className=\"col-sm-5 password-field\" type=\"password\" id={\"repeatpassword\" + this.domKey} placeholder={formatMessage(messages.signupRepeatPasswordFieldPlaceholder)} name=\"repeatpassword\" />\n                <div className=\"col-sm-2 eyeholder\" onMouseDown={() => {this.showPasswords();}} onMouseUp={() => {this.hidePasswords();}} onMouseOut={() => {this.hidePasswords();}}></div>\n\n                <p className=\"terms\">\n                    <FormattedMessage\n                        id=\"signupPasswordRequirements\"\n                        defaultMessage=\"*Passwords must be minimum 6 characters long.\"\n                    />\n                </p>\n            </div>\n        );\n    }\n\n    render() {\n        const {formatMessage} = this.props.intl;\n\n        if (this.state.spinner) {\n            return (\n                <Loader\n                    type=\"ThreeDots\"\n                    color=\"#00BFFF\"\n                    height=\"200\"\n                    width=\"200\"\n                />\n            );\n        }\n        const signupElementsStyle = {'display': this.props.visible ? 'block' : 'none'};\n        return (\n            <form method=\"post\" onSubmit={(event) => { this.clickSignup(event); }}>\n                <div style={signupElementsStyle}>\n                    <input className=\"col-sm-12\" type=\"text\" name=\"email\" value={this.props.email} disabled=\"disabled\" />\n\n                    {\n                        (() => {\n                            if (typeof(this.state.errors) !== \"undefined\" && typeof(this.state.errors.password) !== \"undefined\") {\n                                return (\n                                    <div className=\"error col-sm-12 alert alert-danger\">{this.state.errors.password}</div>\n                                );\n                            } else {\n                                return ( <span></span> );\n                            }\n                        })()\n                    }\n\n                    {\n                        (() => {\n                            if (!this.props.withoutPassword) {\n                                return this.renderPasswordFields();\n                            } else {\n                                return ( <span></span> );\n                            }\n                        })()\n                    }\n                    {\n                        (() => {\n                            if (this.state.termsAndConditions !== false) {\n                                return (\n                                    <div>\n                                        {\n                                            (() => {\n                                                if (typeof(this.state.errors) !== \"undefined\" && typeof(this.state.errors.termsAndConditions) !== \"undefined\") {\n                                                    return (\n                                                        <div\n                                                            className=\"error col-sm-12 alert alert-danger\">{this.state.errors.termsAndConditions}</div>\n                                                    );\n                                                } else {\n                                                    return (<span></span>);\n                                                }\n                                            })()\n                                        }\n\n                                        <p class=\"center-text terms\">\n                                            <input type=\"checkbox\" id={\"termsAndConditions\" + this.domKey} name=\"termsAndConditions\"\n                                                                            value=\"true\"/>\n                                            <FormattedMessage\n                                                id=\"signupTermsAndConditionsLabel\"\n                                                defaultMessage={'I agree to the {termsAndConditions}'}\n                                                values={{\n                                                    \"termsAndConditions\": <a onClick={(event) => { this.showTermsAndConditions(event); }}\n                                                                             id=\"terms-and-conditions-link\"\n                                                                             href=\"/termsofservice\"\n                                                                             target=\"_blank\">\n                                                        <FormattedMessage id=\"termsAndConditionsLink\" defaultMessage=\"Terms and Conditions\"/>\n                                                    </a>\n                                                }}\n                                            />\n                                        </p>\n\n                                        <Modal show={this.state.showTermsAndConditions} onShow={() => { this.termsAndConditionsInnerHtml(); }}>\n                                            <ModalTitle>\n                                                <h2 className=\"terms-and-conditions-title\">\n                                                    <FormattedMessage id=\"termsAndConditionsPopupTitle\" defaultMessage=\"Terms and Conditions\"/>\n                                                </h2>\n                                            </ModalTitle>\n                                            <ModalBody>\n                                                <div id={\"terms-and-conditions-text\" + this.domKey} className=\"terms-and-conditions-text\"></div>\n                                            </ModalBody>\n                                            <ModalFooter>\n                                                <Button onClick={(event) => { this.setState({\"showTermsAndConditions\": false}); }} className=\"bt btn-success\">\n                                                    <FormattedMessage id=\"closeButton\" defaultMessage=\"Close\" />\n                                                </Button>\n                                            </ModalFooter>\n                                        </Modal>\n                                    </div>\n                                );\n                            } else {\n                                return ( <span></span> );\n                            }\n                        })()\n                    }\n\n                    <div>\n                        <input type=\"submit\" value={formatMessage(messages.signupButton)}/>\n                    </div>\n                </div>\n\n                <p className=\"center-text\" style={signupElementsStyle}>\n                    <FormattedMessage\n                        id=\"alreadyHaveAnAccount\"\n                        defaultMessage={'Already have an account? {logInHereLink}'}\n                        values={{\n                            \"logInHereLink\": <a onClick={(event) => {this.clickLogin(event);}} href=\"/login\">\n                                <FormattedMessage id=\"logInHereLink\" defaultMessage=\"Log in here\" />\n                            </a>\n                        }}\n                    />\n                </p>\n\n            </form>\n        );\n    }\n}\n\nSignupVerifiedEmailForm.propTypes = {\n    intl: intlShape.isRequired,\n};\n\nexport default injectIntl(SignupVerifiedEmailForm);\n","import React, { Component } from 'react';\nimport {injectIntl, intlShape} from \"react-intl\";\n\nclass EnterpriseLogins extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    close() {\n        if (typeof(this.props.onClose) === 'function') {\n            this.props.onClose();\n        }\n    }\n\n    openLogin(login) {\n        const width = 800;\n        const height = 600;\n        return window.open(\n            login.uri,\n\n            \"targetWindow\",\n\n            \"toolbar=no, \" +\n            \"location=no, \" +\n            \"status=no, \" +\n            \"menubar=no, \" +\n            \"scrollbars=yes, \" +\n            \"resizable=yes, \" +\n            \"width=\"+width+\", \" +\n            \"height=\"+height\n        );\n    }\n\n    renderLogins() {\n        return this.props.enterpriseLogins\n            .map((login) => {\n                return (\n                    <li>\n                        <a href={\"#\"} onClick={(event) => { event.preventDefault(); this.openLogin(login) }}>\n                            <h2>{login.name}</h2>\n                            <p>Log in to {login.name}</p>\n                        </a>\n                    </li>\n                )\n            })\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Login to company account</h1>\n                <p><a href={\"\"} onClick={() => { this.close() }}>Close</a></p>\n                <ul>\n                    {(() => { return this.renderLogins() })()}\n                </ul>\n            </div>\n        );\n    }\n}\n\nEnterpriseLogins.propTypes = {\n    intl: intlShape.isRequired,\n};\n\nconst EnterpriseLoginsClass = EnterpriseLogins;\n\nexport {EnterpriseLoginsClass};\nexport default injectIntl(EnterpriseLogins);\n","import React, { Component } from 'react';\nimport querystring from 'querystring';\nimport axios from 'axios';\nimport sha1 from 'sha1';\nimport './css/style.css';\nimport './css/icons.css';\nimport './css/login.css';\nimport 'bootstrap/dist/css/bootstrap-bundle.css';\nimport {FormattedMessage, intlShape, injectIntl, defineMessages} from 'react-intl';\nimport Loader from 'react-loader-spinner';\n\nimport feideLogo from './images/feide/emblemhvit-01.png';\n\nimport UserPasswordLogin from './UserPasswordLogin';\nimport SignupForm from \"./SignupForm\";\nimport SignupVerifiedEmailForm from \"./SignupVerifiedEmailForm\";\nimport TermsAndConditions from \"./TermsAndConditions\";\nimport LoginOperations from './LoginOperations';\nimport {Button} from \"react-bootstrap\";\nimport EnterpriseLogins from \"./EnterpriseLogins\";\n\nconst messages = defineMessages({\n    continueButton: {\n        \"id\": \"continueButton\",\n        \"defaultMessage\": \"Continue\"\n    },\n    emailInUseError: {\n        \"id\": \"emailInUseError\",\n        \"defaultMessage\": \"The email address is associated with an existing account. Please use forgot password, or sign up with a different address.\"\n    },\n    invalidEmailValidationError: {\n        \"id\": \"invalidEmailValidationError\",\n        \"defaultMessage\": \"The supplied email address is invalid.\"\n    },\n    sameEmailSuppliedValidationError: {\n        \"id\": \"sameEmailSuppliedValidationError\",\n        \"defaultMessage\": \"Type in another email address or choose to use the existing account (above).\"\n    },\n    usernameTakenError: {\n        'id': 'usernameTakenError',\n        'defaultMessage': 'The username is taken. Please try something else.'\n    },\n    newUsernameRequiredError: {\n        'id': 'newUsernameRequiredError',\n        'defaultMessage': 'New username required.'\n    },\n    changeUsernameFailed: {\n        'id': 'changeUsernameFailed',\n        'defaultMessage': 'Change username failed'\n    },\n    ackChangeUsernameFailed: {\n        'id': 'ackChangeUsernameFailed',\n        'defaultMessage': 'Acknowledge change username failed'\n    },\n    forgotPasswordFailed: {\n        'id': 'forgotPasswordFailed',\n        'defaultMessage': 'Forgot password failed'\n    },\n    loginFailedWithErrorCode: {\n        'id': 'loginFailedWithErrorCode',\n        'defaultMessage': 'Login failed with error code {code}'\n    },\n    strangeResponseFromEndpoint: {\n        'id': 'strangeResponseFromEndpoint',\n        'defaultMessage': 'Strange response from {endpointName}'\n    },\n    didNotReceiveIdentityResponseFromEndpoint: {\n        'id': 'didNotReceiveIdentityResponseFromEndpoint',\n        'defaultMessage': 'Did not return an identity id in the response from {endpointName}'\n    },\n    signupFailure: {\n        'id': 'signupFailure',\n        'defaultMessage': 'Signup failure'\n    },\n    signupFailureNoClaimOptions: {\n        'id': 'signupFailureNoClaimOptions',\n        'defaultMessage': 'Signup failure. Backend failed to communicate email claim options.'\n    },\n    unableToSendEmail: {\n        'id': 'unableToSendEmail',\n        'defaultMessage': 'Unable to send email'\n    }\n});\n\nclass ReactiveLogin extends Component {\n    constructor(props) {\n        super(props);\n\n        var loginOpsProps = {};\n        Object.assign(loginOpsProps, props);\n        loginOpsProps.onTermsAndConditions = (jwt, termsAndConditions) => {\n            this.setState({\n                \"mode\": \"termsandconditions\",\n                \"jwt\": jwt,\n                \"termsAndConditions\": termsAndConditions,\n                'termsAndConditionsCallback': null,\n                'termsAndConditionsMode': null,\n                'idpEmailConflict': false,\n                /*\n                 * SPINNER: Important to disable spinner if not done already!\n                 */\n                'spinner': false\n            });\n        };\n        loginOpsProps.onEmailConflict = (payload, intermediateToken) => {\n            /*\n             * SPINNER: Important to disable spinner if not done already!\n             */\n            this.setState({\"idpEmailConflict\": payload, \"idpEmailToken\": intermediateToken, 'spinner': false});\n        };\n        this.loginOperations = new LoginOperations(loginOpsProps);\n\n        this.objectId = sha1(\"\" + Math.random() + Math.random());\n\n        let username = props.username;\n        if (typeof(username) === \"undefined\") {\n            username = \"\";\n        }\n        const authorizeType = props.authorizeType;\n\n        let mode = authorizeType !== \"signup\" ? 'login' : \"signup\";\n        const email = props.email;\n        const emailJwt = props.emailJwt;\n        const hasVerifiedEmail = email && emailJwt;\n        if (mode === \"login\" && hasVerifiedEmail) {\n            mode = \"signup\";\n        }\n        const extParamsInput = typeof(props.extParams) !== 'undefined' ? props.extParams : {};\n        const extParams = {\n            'hideSignupIdps': typeof(extParamsInput.hideSignupIdps) !== 'undefined' ? extParamsInput.hideSignupIdps : false,\n            'embedSignup': typeof(extParamsInput.embedSignup) !== 'undefined' ? extParamsInput.embedSignup : false,\n            'signupWithoutPassword': typeof(extParamsInput.signupWithoutPassword) !== 'undefined' ? extParamsInput.signupWithoutPassword : false,\n            'signupAutoSubmit': typeof(extParamsInput.signupAutoSubmit) !== 'undefined' ? extParamsInput.signupAutoSubmit : false\n        };\n        if (extParams.embedSignup && !extParams.hideSignupIdps) {\n            extParams.hideSignupIdps = true;\n        }\n        this.state = {\n            'mode': mode,\n            \"signupFields\": {},\n            \"signupErrors\": {},\n            \"username\": username,\n            \"password\": \"\",\n            \"loginError\": false,\n            \"idpMergeLoginError\": false,\n            \"idpMergeLoginPasswordPrefill\": \"\",\n            \"language\": typeof(props.language) !== \"undefined\" ? props.language : \"en\",\n            \"email\": hasVerifiedEmail ? email : null,\n            \"emailJwt\": hasVerifiedEmail ? emailJwt : null,\n            \"extParams\": extParams,\n            \"idpEmailConflict\": false,\n            \"idpEmailToken\": false,\n            \"idpEmailValidationError\": false,\n            \"idpChangeEmail\": false,\n            \"idpEmailWaitForEmail\": false,\n            \"claimVerified\": false,\n            \"claimPassword\": false,\n            \"mustChangeUsername\": false,\n            \"changeUsernameJwt\": null,\n            \"changeUsernamePreviousEmail\": null,\n            \"changeUsernameOtherLogins\": [],\n            \"changeUsernameError\": false,\n            \"termsAndConditions\": null,\n            'termsAndConditionsMode': null,\n            'termsAndConditionsCallback': null,\n            \"spinner\": true // SPINNER: This is a bit risky! Need to remember to disable when: Loginbox shown, terms and conditions, email conflict (everywhere the UI is needed)\n        };\n\n        if (!hasVerifiedEmail && email) {\n            this.state.signupFields.email = email;\n        }\n\n        this.authorizeWithSession();\n    }\n\n    listenEvent(element, event, listener) {\n        if (typeof(element.addEventListener) != 'undefined') {\n            element.addEventListener(event, listener, false);\n        } else if (typeof(element.attachEvent) != 'undefined') {\n            element.attachEvent(\"on\" + event, listener);\n        }\n    }\n    static getElementsByName(name) {\n        var nodeList = document.getElementsByName(name);\n        var elements = [];\n        for (var i = 0; i < nodeList.length; i++) {\n            elements[i] = nodeList.item(i);\n        }\n        return elements;\n    }\n    static getMeta(name) {\n        var matches =  ReactiveLogin.getElementsByName(name)\n            .filter(element => typeof(element.tagName) !== 'undefined')\n            .filter(element => element.tagName.toLowerCase() === \"meta\")\n            .map(element => element.getAttribute(\"content\"))\n            .filter(value => typeof(value) !== \"undefined\")\n            .filter(value => value);\n        if (matches.length > 0) {\n            return matches[0];\n        } else {\n            return null;\n        }\n    }\n    getMeta(name) {\n        return ReactiveLogin.getMeta(name);\n    }\n\n    getIdpUris() {\n        var json = this.props.idpUrisJson;\n        var uris = JSON.parse(json);\n        return uris;\n    }\n\n    getEnterpriseLogins() {\n        const json = this.props.enterpriseLogins;\n        if (json !== undefined) {\n            return JSON.parse(json);\n        } else {\n            return [];\n        }\n    }\n\n    login(username, password) {\n        this.setState({\n            \"username\": username,\n            \"password\": password,\n            \"loginError\": false\n        });\n        axios.post(\n            this.props.authBaseUri+'/v1/login/user', querystring.stringify({\n                'username': username,\n                'password': password\n            })\n        )\n            .then((response) => {\n                var loginData = response.data;\n                if (typeof(loginData.mustChangeUsername) !== 'undefined' && loginData.mustChangeUsername) {\n                    this.setState({\n                        'mustChangeUsername': true,\n                        'changeUsernameJwt': loginData.intermediateJwtToken,\n                        'changeUsernamePreviousEmail': loginData.removedEmail,\n                        'changeUsernameOtherLogins': loginData.alternativeLogins,\n                        'changeUsernameError': false\n                    });\n                } else {\n                    this.loginOperations.autoConnectIdentity(this.state.language, loginData.intermediateJwtToken);\n                }\n            })\n            .catch((error) => {\n                this.setState({\"loginError\": true});\n            })\n    }\n\n    signupSubmit(email, password, termsAndConditions) {\n        const {formatMessage} = this.props.intl;\n\n        const redirectUri = this.props.authorizeUri;\n        const abortUri = this.props.abortUri;\n        const clientId = this.props.clientId;\n        this.setState({\"signupFields\": {\"email\": email, \"password\": password}, \"spinner\": true});\n        const signupRequestPayload = {\n            'email': email,\n            'success': redirectUri,\n            'abort': abortUri,\n            'clientId': clientId,\n            'termsAndConditionsAccepted': termsAndConditions\n        };\n        if (password !== null) {\n            signupRequestPayload.password = password;\n        }\n        axios.post(\n            this.props.authBaseUri+'/v1/login/signup', querystring.stringify(signupRequestPayload))\n            .then((response) => {\n                const signupData = response.data;\n                this.loginOperations.loggedIn(this.state.language, signupData.jwt);\n            })\n            .catch((error) => {\n                const response = error.response;\n                if (typeof(response) !== \"undefined\") {\n                    if (response.status == 400) {\n                        var validationErrors = response.data;\n                        if (typeof(validationErrors) !== \"undefined\" && typeof(validationErrors.fieldErrors) !== \"undefined\") {\n                            var errors = {};\n                            for (var i = 0; i < validationErrors.fieldErrors.length; i++) {\n                                errors[validationErrors.fieldErrors[i].field] = validationErrors.fieldErrors[i].message;\n                            }\n                            this.setState({\"signupErrors\": errors});\n                        } else {\n                            alert(\"Invalid request error on signup\");\n                        }\n                    } else if (response.status == 409) {\n                        this.setState({\"signupErrors\": {\"email\": formatMessage(messages.emailInUseError)}});\n                    } else {\n                        alert(\"Error code \"+response.status+\" on signup\");\n                    }\n                } else {\n                    alert(\"Signup failed\");\n                }\n                this.setState({\"spinner\": false});\n            });\n    }\n\n    signupVerifiedSubmit(password, termsAndConditions) {\n        const {formatMessage} = this.props.intl;\n\n        const redirectUri = this.props.authorizeUri;\n        const abortUri = this.props.abortUri;\n        const clientId = this.props.clientId;\n        this.setState({\"signupFields\": {\"password\": password}, \"spinner\": true});\n        const signupRequestPayload = {\n            'clientId': clientId,\n            'termsAndConditionsAccepted': termsAndConditions,\n            'language': this.state.language\n        };\n        if (password !== null) {\n            signupRequestPayload.password = password;\n        }\n        axios.post(\n            this.props.authBaseUri+'/v1/login/signupverified', querystring.stringify(signupRequestPayload), {\n                'headers': {\n                    'Authorization': 'Bearer ' + this.state.emailJwt\n                }\n            })\n            .then((response) => {\n                const signupData = response.data;\n                this.loginOperations.loggedIn(this.state.language, signupData.jwt);\n            })\n            .catch((error) => {\n                const response = error.response;\n                if (typeof(response) !== \"undefined\") {\n                    if (response.status == 400) {\n                        var validationErrors = response.data;\n                        if (typeof(validationErrors) !== \"undefined\" && typeof(validationErrors.fieldErrors) !== \"undefined\") {\n                            var errors = {};\n                            for (var i = 0; i < validationErrors.fieldErrors.length; i++) {\n                                errors[validationErrors.fieldErrors[i].field] = validationErrors.fieldErrors[i].message;\n                            }\n                            this.setState({\"signupErrors\": errors});\n                        } else {\n                            alert(\"Invalid request error on signup\");\n                        }\n                    } else {\n                        alert(\"Error code \"+response.status+\" on signup\");\n                    }\n                } else {\n                    alert(\"Signup failed\");\n                }\n                this.setState({\"spinner\": false});\n            });\n    }\n\n    forgotPasswordRequest(email) {\n        var redirectUri = this.props.authorizeUri;\n        var abortUri = this.props.abortUri;\n        var clientId = this.props.clientId;\n        axios.post(\n            this.props.authBaseUri+'/v1/login/forgotpassword', querystring.stringify({\n                'email': email,\n                'redirectUri': redirectUri,\n                'abortUri': abortUri,\n                'clientId': clientId,\n                'language': this.state.language\n            })\n        )\n            .then((response) => {\n                var forgotPasswordData = response.data;\n                this.setState({'mode': 'waitforemail', 'resetEmail': forgotPasswordData.email});\n            })\n            .catch((error) => {\n                alert(\"Forgot password error\");\n            })\n    }\n\n    authorizeWithSession() {\n        var tryAuthorize = () => {\n            var codeAuthorizeUri = this.props.codeAuthorizeUri;\n            axios.get(\n                this.props.authBaseUri+codeAuthorizeUri, {\n                    'xsrfCookieName': null,\n                    'withCredentials': true\n                }\n            )\n                .then((response) => {\n                    var authorizeData = response.data;\n                    if (typeof(authorizeData) !== 'undefined' && typeof(authorizeData.type) !== 'undefined' && authorizeData.type === 'redirect' && typeof(authorizeData.redirect) !== 'undefined') {\n                        this.loginOperations.authorizationRedirect(authorizeData.redirect);\n                    } else {\n                        /* Normal when not logged in */\n                        this.setState({'spinner': false});\n                    }\n                })\n                .catch((error) => {\n                    var response = error.response;\n                    if (typeof(response) !== 'undefined') {\n                        alert(\"Error response code \"+response.status+\" on authorize endpoint. Please try again later.\");\n                    } else {\n                        /* Normal when not logged in */\n                    }\n                    this.setState({'spinner': false});\n                });\n        };\n\n        axios.get(\n            this.props.authBaseUri+'/v1/login/emailverification', {\n                'xsrfCookieName': null,\n                'withCredentials': true\n            }\n        )\n            .then((response) => {\n                var emailVerified = response.data;\n                if (typeof(emailVerified) !== 'undefined' && typeof(emailVerified.intermediateJwtToken) !== 'undefined') {\n                    var intermediateToken = emailVerified.intermediateJwtToken;\n                    this.loginOperations.autoConnectIdentity(this.state.language, intermediateToken);\n                } else {\n                    tryAuthorize();\n                }\n            })\n            .catch((emailError) => {\n                tryAuthorize();\n            });\n    }\n\n    authorizationRedirect(redirect) {\n        if (typeof(this.props.authorizationCodeCallback) === 'function') {\n            const queryPos = redirect.indexOf('?');\n            let params = {};\n            if (queryPos >= 0) {\n                const query = redirect.substring(queryPos + 1);\n                const pairs = query.split('&')\n                    .map(function (pair) {\n                        const eqPos = pair.indexOf('=');\n                        if (eqPos >= 0) {\n                            return [pair.substring(0, eqPos), pair.substring(eqPos + 1)];\n                        } else {\n                            return [pair, ''];\n                        }\n                    })\n                    .map(function (pair) {\n                        return pair.map(decodeURIComponent);\n                    });\n                pairs.forEach((pair) => {\n                    params[pair[0]] = pair[1];\n                });\n            }\n            if (typeof(params.code) !== 'undefined' && params.code) {\n                this.props.authorizationCodeCallback(params.code);\n                return;\n            }\n\n        }\n        window.location.href = redirect;\n    }\n\n    declineTermsAndConditions() {\n        document.location.href = this.props.logoutUri;\n    }\n\n    isIE11orLess() {\n        return typeof(window.document.documentMode) !== 'undefined' && window.document.documentMode <= 11;\n    }\n\n    pollTokenReturn(url) {\n        setTimeout(() => {\n            axios.get(url)\n                .then((response) => {\n                    var data = response.data;\n                    if (typeof(data) !== 'undefined') {\n                        if (data.token) {\n                            this.loginOperations.autoConnectIdentity(this.state.language, data.token);\n                        } else {\n                            this.pollTokenReturn(url);\n                        }\n                    }\n                })\n        }, 1000);\n    }\n\n    startPopupLogin(element, event) {\n        const {formatMessage} = this.props.intl;\n\n        var popupHref = element.getAttribute(\"data-popup-href\");\n        var width = element.getAttribute(\"data-popup-width\");\n        var height = element.getAttribute(\"data-popup-height\");\n        if (typeof(width) == 'undefined' || !width) {\n            width = 800;\n        }\n        if (typeof(height) == 'undefined' || !height) {\n            height = 600;\n        }\n        if (typeof(popupHref) != 'undefined' && popupHref) {\n            if (typeof(event) == 'undefined' || !event) {\n                event = window.event;\n            }\n\n            const openPopup = function (url) {\n                return window.open(\n                    popupHref,\n\n                    \"targetWindow\",\n\n                    \"toolbar=no, \" +\n                    \"location=no, \" +\n                    \"status=no, \" +\n                    \"menubar=no, \" +\n                    \"scrollbars=yes, \" +\n                    \"resizable=yes, \" +\n                    \"width=\"+width+\", \" +\n                    \"height=\"+height\n                );\n            };\n\n            event.preventDefault();\n\n            if (this.isIE11orLess()) {\n                var popup = openPopup('about:blank');\n                axios.post(this.props.authBaseUri+\"/v1/login/popuptokenreturn\")\n                    .then((response) => {\n                        var data = response.data;\n                        if (typeof(data) !== 'undefined' && typeof(data.id) !== 'undefined' && typeof(data.url) !== 'undefined') {\n                            this.pollTokenReturn(data.url);\n\n                            popup.location.href = popupHref + '&popuptokenreturn='+data.id;\n                        } else {\n                            popup.close();\n                            alert('Unable to open login popup window');\n                        }\n                    })\n                    .catch((error) => {\n                        popup.close();\n                        alert('Unable to open login popup window');\n                    });\n            } else {\n                openPopup(popupHref);\n            }\n        }\n    }\n\n    forgotPassword() {\n        this.setState({'mode': 'forgotpassword'});\n    }\n    forgotPasswordByEmail(event) {\n        event.preventDefault();\n        var email = document.getElementById(\"email-input\").value;\n        this.forgotPasswordRequest(email);\n    }\n    signup() {\n        this.setState({'mode': 'signup'});\n    }\n    setLoginMode() {\n        this.setState({'mode': 'login'});\n    }\n\n    verifyEmailAndLogIn(credentialsId) {\n        const {formatMessage} = this.props.intl;\n\n        axios.post(this.props.authBaseUri+\"/v1/login/idp/verifymerge\", querystring.stringify({\n            \"credentialsId\": credentialsId,\n            \"codeAuthorizeUrl\": this.props.codeAuthorizeUri\n        }), {\n            'headers' : {\n                'Authorization': 'Bearer '+this.state.idpEmailToken\n            }\n        })\n            .then((response) => {\n                this.setState({'idpEmailWaitForEmail': true});\n            })\n            .catch((error) => {\n                alert(formatMessage(messages.unableToSendEmail));\n            });\n    }\n\n    verifyOverrideEmailAndClaimOptions(credentialsId, email) {\n        const {formatMessage} = this.props.intl;\n\n        axios.post(this.props.authBaseUri+\"/v1/login/idp/verifyemailandclaim\", querystring.stringify({\n            \"credentialsId\": credentialsId,\n            \"email\": email,\n            \"codeAuthorizeUrl\": this.props.codeAuthorizeUri\n        }), {\n            'headers' : {\n                'Authorization': 'Bearer '+this.state.idpEmailToken\n            }\n        })\n            .then((response) => {\n                this.setState({'idpEmailWaitForEmail': true});\n            })\n            .catch((error) => {\n                alert(formatMessage(messages.unableToSendEmail));\n            });\n    }\n\n    changeEmailAndSignUp(credentialsId, email) {\n        const {formatMessage} = this.props.intl;\n\n        if (!email || email.length < 3 || email.indexOf('@') < 0) {\n            const validationError = formatMessage(messages.invalidEmailValidationError);\n            this.setState({'idpEmailValidationError': validationError});\n            return;\n        } else if (this.state.idpChangeEmail === email) {\n            const validationError = formatMessage(messages.sameEmailSuppliedValidationError);\n            this.setState({'idpEmailValidationError': validationError});\n            return;\n        } else {\n            this.setState({'idpEmailValidationError': false});\n        }\n        axios.post(this.props.authBaseUri+\"/v1/login/idp/email\", querystring.stringify({\n            \"credentialsId\": credentialsId,\n            \"email\": email,\n            \"codeAuthorizeUrl\": this.props.codeAuthorizeUri\n        }), {\n            'headers' : {\n                'Authorization': 'Bearer '+this.state.idpEmailToken\n            }\n        })\n            .then((response) => {\n                this.setState({'idpEmailWaitForEmail': true, \"idpChangeEmail\": email});\n            })\n            .catch((error) => {\n                if (error.response && error.response.status === 409) {\n                    /* 409=conflict */\n                    const payload = error.response.data;\n                    if (payload && typeof(payload.length) !== \"undefined\" && payload.length > 0) {\n                        const item = payload[0];\n                        if (\n                            item &&\n                            typeof(item.credentialsId) !== \"undefined\" &&\n                            typeof(item.email) !== \"undefined\" &&\n                            item.type === \"email-conflict\" &&\n                            typeof(item.conflictingIdentity) !== \"undefined\" &&\n                            typeof(item.conflictingIdentity.id) !== \"undefined\"\n                        ) {\n                            axios.post(this.props.authBaseUri+\"/v1/login/idp/emailclaimoptions\", querystring.stringify({\n                                \"credentialsId\": credentialsId,\n                                \"email\": email\n                            }), {\n                                'headers' : {\n                                    'Authorization': 'Bearer '+this.state.idpEmailToken\n                                }\n                            })\n                                .then((claimOptResponse) => {\n                                    const claimOptions = claimOptResponse.data;\n                                    if (typeof(claimOptions.isVerified) !== 'undefined' && typeof(claimOptions.hasPassword) !== 'undefined') {\n                                        this.setState({\"idpChangeEmail\": email, \"claimVerified\": !!claimOptions.isVerified, \"claimPassword\": !!claimOptions.hasPassword, \"idpMergeLoginPasswordPrefill\": \"\"});\n                                    } else {\n                                        alert(formatMessage(messages.signupFailureNoClaimOptions));\n                                    }\n                                })\n                                .catch((claimOptError) => {\n                                    alert(formatMessage(messages.signupFailure));\n                                });\n                            return;\n                        }\n                    }\n                }\n                alert(formatMessage(messages.signupFailure));\n            });\n    }\n\n    idpSingupWithoutEmail(credentialsId) {\n        const {formatMessage} = this.props.intl;\n        axios.post(this.props.authBaseUri+\"/v1/login/idp/noemail\", querystring.stringify({\n            \"credentialsId\": credentialsId\n        }), {\n            'headers' : {\n                'Authorization': 'Bearer '+this.state.idpEmailToken\n            }\n        })\n            .then((response) => {\n                return this.idconnectLikeResponse(response, 'signup ext idp without email endpoint');\n            })\n            .catch((error) => {\n                alert(formatMessage(messages.signupFailure));\n            });\n    }\n\n    idconnectLikeResponse(response, endpointName) {\n        const {formatMessage} = this.props.intl;\n        var accountData = response.data;\n        var identities = accountData.identities;\n        if (typeof(identities) !== 'undefined' && identities.length === 1) {\n            var identity = identities[0];\n            var identityId = identity.id;\n            if (typeof(identityId) !== 'undefined' && identityId) {\n                this.loginOperations.loginWithIdentity(this.state.language, this.state.idpEmailToken, identityId);\n            } else {\n                alert(formatMessage(messages.didNotReceiveIdentityResponseFromEndpoint, {'endpointName': endpointName}));\n            }\n        } else {\n            alert(formatMessage(messages.strangeResponseFromEndpoint, {'endpointName': endpointName}));\n        }\n    }\n\n    idpLoginAndMerge(password) {\n        const {formatMessage} = this.props.intl;\n        this.setState({'idpMergeLoginError': false});\n        axios.post(this.props.authBaseUri+\"/v1/login/idp/loginmerge\", querystring.stringify({\n            \"email\": this.state.idpChangeEmail,\n            \"password\": password\n        }), {\n            'headers' : {\n                'Authorization': 'Bearer '+this.state.idpEmailToken\n            }\n        })\n            .then((response) => {\n                return this.idconnectLikeResponse(response, 'login and merge accounts');\n            })\n            .catch((error) => {\n                if (error.response.status === 401) {\n                    this.setState({'idpMergeLoginError': true, 'idpMergeLoginPasswordPrefill': password});\n                } else {\n                    alert(formatMessage(messages.loginFailedWithErrorCode, {'code': error.response.status}));\n                }\n            })\n    }\n\n    idpLoginAndMergeForgotPassword() {\n        const {formatMessage} = this.props.intl;\n        this.setState({'idpMergeLoginError': false});\n        axios.post(this.props.authBaseUri+\"/v1/login/idp/loginmergeforgotpassword\", querystring.stringify({\n            \"email\": this.state.idpChangeEmail,\n            \"codeAuthorizeUrl\": this.props.codeAuthorizeUri\n        }), {\n            'headers' : {\n                'Authorization': 'Bearer '+this.state.idpEmailToken\n            }\n        })\n            .then((response) => {\n                this.setState({'idpEmailWaitForEmail': true});\n            })\n            .catch((error) => {\n                alert(formatMessage(messages.forgotPasswordFailed));\n            });\n    }\n\n    changeUserProceedWithoutUsername() {\n        const {formatMessage} = this.props.intl;\n        axios.post(this.props.authBaseUri+\"/v1/changeusername/ack\", querystring.stringify({\n            \"email\": this.state.changeUsernamePreviousEmail\n        }), {\n            'headers' : {\n                'Authorization': 'Bearer '+this.state.changeUsernameJwt\n            }\n        })\n            .then((response) => {\n                this.loginOperations.autoConnectIdentity(this.state.language, this.state.changeUsernameJwt);\n                this.setState({'mustChangeUsername': false});\n            })\n            .catch((error) => {\n                alert(formatMessage(messages.ackChangeUsernameFailed));\n                this.loginOperations.autoConnectIdentity(this.state.language, this.state.changeUsernameJwt);\n                this.setState({'mustChangeUsername': false});\n            });\n    }\n\n    changeUserProceedWithUsername(usernameFieldRef) {\n        const {formatMessage} = this.props.intl;\n        const username = usernameFieldRef.value;\n        if (typeof(username) !== 'undefined' && username) {\n            axios.post(this.props.authBaseUri + \"/v1/changeusername/change\", querystring.stringify({\n                \"email\": this.state.changeUsernamePreviousEmail,\n                \"username\": username\n            }), {\n                'headers': {\n                    'Authorization': 'Bearer ' + this.state.changeUsernameJwt\n                }\n            })\n                .then((response) => {\n                    this.loginOperations.autoConnectIdentity(this.state.language, this.state.changeUsernameJwt);\n                    this.setState({'mustChangeUsername': false});\n                })\n                .catch((error) => {\n                    const response = error.response;\n                    if (typeof(response) !== 'undefined' && response.status === 409) {\n                        this.setState({'changeUsernameError': formatMessage(messages.usernameTakenError)});\n                    } else {\n                        alert(formatMessage(messages.changeUsernameFailed));\n                    }\n                });\n        } else {\n            this.setState({'changeUsernameError': formatMessage(messages.newUsernameRequiredError)});\n        }\n    }\n\n    showTermsAndConditionsWithCallback(termsAndConditions, callback) {\n        const previousMode = this.state.mode;\n        this.setState({\n            'mode': 'signuptermsandconditions',\n            'termsAndConditions': termsAndConditions,\n            'termsAndConditionsMode': previousMode,\n            'termsAndConditionsCallback': callback,\n            /*\n             * SPINNER: Important to disable spinner if not done already!\n             */\n            'spinner': false\n        });\n    }\n\n    componentDidMount() {\n        this.listenEvent(window, 'message', (event) => {\n            /*\n             * For Internet Explorer:\n             */\n            if (typeof(event) === 'undefined' && typeof(window.event) !== 'undefined') {\n                event = window.event;\n            }\n\n            var data = event.data;\n            if (typeof(data) !== 'undefined' && typeof(data.type) !== 'undefined') {\n                if (data.type === 'idpPopupJwt') {\n                    var jwt = data.jwt;\n                    this.loginOperations.autoConnectIdentity(this.state.language, jwt);\n                } else if (data.type === 'enterprisePopupJwt') {\n                    const jwt = data.jwt;\n                    this.loginOperations.loginWithIdentity(this.state.language, jwt, null);\n                }\n            }\n        });\n    }\n\n    renderIdpRecursiveInUse() {\n        const credentialsId = this.state.idpEmailConflict[0].credentialsId;\n        if (this.state.claimPassword) {\n            return (\n                <div>\n                    <p>\n                        <FormattedMessage\n                            id=\"idpEmailConflictOverrideConflictLogin\"\n                            defaultMessage={'The email address you provided is already in use. Please log in to your account:'}\n                            values={{'email': this.state.idpChangeEmail}}\n                        />\n                    </p>\n                    <UserPasswordLogin key={'idpLoginMerge'+this.state.idpChangeEmail+(this.state.idpMergeLoginError?'error':'')} onLogin={(username, password) => {\n                        this.idpLoginAndMerge(password);\n                    }} onForgotPassword={() => {\n                        this.idpLoginAndMergeForgotPassword();\n                    }} username={this.state.idpChangeEmail} password={''} loginError={this.state.idpMergeLoginError} usernameFieldDisabled={true} />\n                </div>\n            );\n        } else {\n            return (\n                <div>\n                    <p>\n                        <FormattedMessage\n                            id=\"idpEmailConflictOverrideConflictWithoutPassword\"\n                            defaultMessage={'The email address you provided is already in use. Please verify that the email address is yours.'}\n                            values={{'email': this.state.idpChangeEmail}}\n                        />\n                    </p>\n                    <div className=\"conflicting-override-email-buttons\">\n                        <Button onClick={() => { this.verifyOverrideEmailAndClaimOptions(credentialsId, this.state.idpChangeEmail); }} className=\"btn btn-success terms-and-conditions-buttons\">\n                            <FormattedMessage\n                                id=\"idpEmailConflictOverrideConflictClaimEmailButton\"\n                                defaultMessage=\"Send an email to {email}\"\n                                values={{'email': this.state.idpChangeEmail}}\n                            />\n                        </Button>\n                        <Button onClick={() => { this.setState({\"idpChangeEmail\": false}); }} className=\"btn btn-danger terms-and-conditions-buttons\">\n                            <FormattedMessage\n                                id=\"idpEmailConflictOverrideConflictCancelClaimEmailButton\"\n                                defaultMessage=\"Don't use this email address\"\n                            />\n                        </Button>\n                    </div>\n                </div>\n            );\n        }\n    }\n\n    renderMustChangeUsernameHasAlternatives() {\n        return (\n            <div>\n                <p><FormattedMessage id={'mustChangeLoginNameUseAlternatives'} defaultMessage={'You do have alternative email addresses on your account. Please use one or more of the following email addresses as login username from now on:'} /></p>\n                <ul>\n                    {this.state.changeUsernameOtherLogins.map((email) => {\n                        return ( <li>{email}</li>);\n                    })}\n                </ul>\n                <Button onClick={() => { this.changeUserProceedWithoutUsername(); }} className=\"btn btn-success\">\n                    <FormattedMessage id={'continueButton'} defaultMessage={'Continue'} />\n                </Button>\n            </div>\n        );\n    }\n\n    renderMustChangeUsernameNoAlternatives() {\n        const {formatMessage} = this.props.intl;\n\n        return (\n            <div>\n                {\n                    (() => {\n                        if (this.state.changeUsernameError) {\n                            return ( <div className={'error col-sm-12 alert alert-danger'}>{this.state.changeUsernameError}</div> );\n                        } else {\n                            return ( <span></span> );\n                        }\n                    })()\n                }\n                <label>\n                    <FormattedMessage id={'mustChangeLoginNameTypeNew'} defaultMessage={'Please type in a new username for login:'}/>\n                    <input type={'text'} ref={(ref) => { this.changeUsernameFieldRef = ref; }} />\n                </label>\n                <Button onClick={() => { this.changeUserProceedWithUsername(this.changeUsernameFieldRef); }} className=\"btn btn-success\">\n                    <FormattedMessage id={'continueButton'} defaultMessage={'Continue'} />\n                </Button>\n            </div>\n        );\n    }\n\n    renderMustChangeUsername() {\n        return (\n            <div>\n                <p>\n                    <FormattedMessage id={'mustChangeLoginNameDescription'} defaultMessage={'The email address {email} had to be removed from your account because another user claimed ownership of it. You will not be able to log in using this address anymore.'} values={{email: this.state.changeUsernamePreviousEmail}} />\n                </p>\n                {(() => {\n                    if (typeof(this.state.changeUsernameOtherLogins) !== 'undefined' && typeof(this.state.changeUsernameOtherLogins.length) !== 'undefined' && this.state.changeUsernameOtherLogins.length > 0) {\n                        return this.renderMustChangeUsernameHasAlternatives();\n                    } else {\n                        return this.renderMustChangeUsernameNoAlternatives();\n                    }\n                })()}\n            </div>\n        );\n    }\n\n    renderIdpEmailInUse() {\n        const credentialsId = this.state.idpEmailConflict[0].credentialsId;\n        if (this.state.idpEmailWaitForEmail !== false) {\n            return (\n                <div>\n                    <p>\n                        <FormattedMessage\n                            id=\"idpEmailConflictSentEmailForMerge\"\n                            defaultMessage={'We\\'ve sent you an email to the address {email}. Please check your email. In order to proceed please click the link in the email.'}\n                            values={{'email': this.state.idpChangeEmail ? this.state.idpChangeEmail : this.state.idpEmailConflict[0].email}}\n                        />\n                    </p>\n                </div>\n            );\n        } else {\n            if (!this.state.idpChangeEmail) {\n                return (\n                    <div>\n                        <p>\n                            <FormattedMessage\n                                id=\"idpEmailConflict\"\n                                defaultMessage={'The email address we received from the external identity provider is already in use. Please choose one of the following resolutions:'}\n                                values={{'email': this.state.idpEmailConflict[0].email}}\n                            />\n                        </p>\n\n                        <ul>\n                            <li>\n                                <a onClick={() => {\n                                    this.verifyEmailAndLogIn(credentialsId);\n                                }}>\n                                    <FormattedMessage\n                                        id=\"idpEmailConflictVerify\"\n                                        defaultMessage={'Send an email to {email} and verify that it is yours. Then log in with the existing account'}\n                                        values={{'email': this.state.idpEmailConflict[0].email}}\n                                    />\n                                </a>\n                            </li>\n                            <li>\n                                <label>\n                                    <FormattedMessage\n                                        id=\"idpEmailConflictTypeInEmail\"\n                                        defaultMessage={'Type in email: '}\n                                    />\n                                    <input key=\"idp-conflict-change-email-field\" id={this.objectId + \"-idp-signup-email\"} type=\"text\"/>\n                                </label>\n                                <button onClick={() => {\n                                    const email = document.getElementById(this.objectId + \"-idp-signup-email\").value;\n                                    this.changeEmailAndSignUp(credentialsId, email);\n                                }}>\n                                    <FormattedMessage id={'signup'} defaultMessage={'Sign up'} />\n                                </button>\n                                { this.state.idpEmailValidationError ? ( <span key={'idp-conflict-email-field-validation-error-'+this.state.idpEmailValidationError} className={'error'}>{this.state.idpEmailValidationError}</span> ) : ( <span key={'idp-conflict-email-field-validation-error'}></span> )}\n                            </li>\n                            <li>\n                                <a onClick={() => {\n                                    this.idpSingupWithoutEmail(credentialsId);\n                                }}>\n                                    <FormattedMessage id={'optionProceedWithoutEmailAfterConflict'} defaultMessage={'Proceed without an email address. Certain functionality might be disabled. You\\'ll be able to add your email address later.'} />\n                                </a>\n                            </li>\n                        </ul>\n                    </div>\n                );\n            } else {\n                return this.renderIdpRecursiveInUse();\n            }\n        }\n    }\n\n    renderExtIdpOrLoginHeading() {\n        if (this.state.mode === 'login') {\n            return (\n                <h3 className=\"center-text\">\n                    <FormattedMessage id=\"loginWith\"\n                                      defaultMessage=\"Login with\"/>\n                </h3>\n            );\n        } else {\n            if (this.state.extParams.embedSignup) {\n                return (\n                    <div className={'embedded-signup-heading'}>\n                        <h3 className=\"center-text\">\n                            <FormattedMessage id=\"embedSignupHeading\"\n                                              defaultMessage=\"Verify your user profile\"/>\n                        </h3>\n                        <p>\n                            <FormattedMessage id={'embedSignupP1'}\n                                              defaultMessage={'Since this is the first time you take one of our courses, we ask you for an additional round of login for your user to be verified. This is to ensure that we are 100% sure that this is you and can safeguard your personal safety.'} />\n                        </p>\n                        <p>\n                            <FormattedMessage id={'embedSignupP2'}\n                                              defaultMessage={'Once you have logged in, you will receive an email that you also need to open and confirm. This is a one-time request and will not be required the next time you log in.'} />\n                        </p>\n                    </div>\n                );\n            } else if (this.state.extParams.hideSignupIdps) {\n                return (\n                    <h3 className=\"center-text\">\n                        <FormattedMessage id=\"signup\"\n                                          defaultMessage=\"Signup\"/>\n                    </h3>\n                );\n            } else {\n                return (\n                    <h3 className=\"center-text\">\n                        <FormattedMessage id=\"signupWith\"\n                                          defaultMessage=\"Signup with\"/>\n                    </h3>\n                );\n            }\n        }\n    }\n\n    renderTopWithExtIdps() {\n        var btnClass = {\n            \"skolon\": \"btn-sko\",\n            \"feidetest\": \"btn-feide\",\n            \"feideopenidp\": \"btn-feide\",\n            \"feide\": \"btn-feide\",\n            \"dataporten\": \"btn-feide\",\n            \"google\": \"btn-go\",\n            \"facebook\": \"btn-fb\",\n            \"windowslive\": \"btn-wl\",\n            \"twitter\": \"btn-tw\"\n        };\n        var btnTitle = {\n            \"skolon\": \"Skolon\",\n            \"feidetest\": \"Feide (Test)\",\n            \"feideopenidp\": \"Feide (OpenIDP)\",\n            \"feide\": \"Feide\",\n            \"dataporten\": \"Dataporten\",\n            \"google\": \"Google\",\n            \"facebook\": \"Facebook\",\n            \"windowslive\": \"Windows Live ID\",\n            \"twitter\": \"Twitter\"\n        };\n\n        if (!this.state.mustChangeUsername && (this.state.mode === 'login' || this.state.mode === 'signup')) {\n            if (this.state.idpEmailConflict === false) {\n                return (\n                    <div>\n                        {\n                            (() => {\n                                const enterpriseLogins = this.getEnterpriseLogins();\n                                if (enterpriseLogins.length > 0) {\n                                    return (\n                                        <div className={'enterprise-logins'}>\n                                            <a href={'#'} onClick={() => { this.setState({'mode': 'enterprise-login'}); }}>Company login</a>\n                                        </div>\n                                    );\n                                } else {\n                                    return (\n                                        <div className={'enterprise-logins'}></div>\n                                    );\n                                }\n                            })()\n                        }\n                        { this.renderExtIdpOrLoginHeading() }\n\n                        {\n                            (() => {\n                                if (this.state.mode !== 'signup' || !this.state.extParams.hideSignupIdps) {\n                                    return (\n                                        <div>\n                                            <ul id=\"loginlist\">\n                                                {\n                                                    this.getIdpUris().filter((info) => {\n                                                        return (info.id !== \"local\" && info.id !== \"pedagogvarmland\");\n                                                    }).map((info) => {\n                                                        var btnClassName = btnClass[info.id];\n                                                        if (typeof(btnClassName) === 'undefined') {\n                                                            btnClassName = \"btn\";\n                                                        }\n                                                        var btnTitleStr = btnTitle[info.id];\n                                                        if (typeof(btnTitleStr) === 'undefined') {\n                                                            btnTitleStr = info.id;\n                                                        }\n                                                        return (\n                                                            <li key={info.uri} className={btnClassName}>\n                                                                {\n                                                                    (() => {\n                                                                        var width = 600;\n                                                                        var height = 500;\n                                                                        if (btnClassName === \"btn-go\") {\n                                                                            width = 500;\n                                                                            height = 600;\n                                                                        }\n                                                                        var clickHandler = (() => {\n                                                                            var obj = this;\n                                                                            return function (event) {\n                                                                                if (typeof(event) === 'undefined' || !event) {\n                                                                                    event = window.event;\n                                                                                }\n                                                                                var element = event.target;\n                                                                                while (element && element.className !== \"idp-button-with-popup\") {\n                                                                                    element = element.parentNode != element ? element.parentNode : null;\n                                                                                }\n                                                                                if (element) {\n                                                                                    obj.startPopupLogin(element, event);\n                                                                                }\n                                                                            }\n                                                                        })();\n                                                                        if (btnClassName === \"btn-fb\") {\n                                                                            return (\n                                                                                <a onClick={clickHandler}\n                                                                                   className=\"idp-button-with-popup\"\n                                                                                   href={info.uri}\n                                                                                   data-popup-href={info.popupTokenUri}\n                                                                                   data-popup-width={width}\n                                                                                   data-popup-height={height}>\n                                                                    <span className=\"icon-BB_icn_sm_facebook\">\n                                                                        <span className=\"path1\"></span>\n                                                                        <span className=\"path2\"></span>\n                                                                    </span>\n                                                                                    Facebook\n                                                                                </a>\n                                                                            );\n                                                                        } else if (btnClassName === \"btn-go\") {\n                                                                            return (\n                                                                                <a onClick={clickHandler}\n                                                                                   className=\"idp-button-with-popup\"\n                                                                                   href={info.uri}\n                                                                                   data-popup-href={info.popupTokenUri}\n                                                                                   data-popup-width={width}\n                                                                                   data-popup-height={height}>\n                                                                    <span className=\"icon-BB_icn_sm_google\">\n                                                                        <span className=\"path1\"></span>\n                                                                        <span className=\"path2\"></span>\n                                                                    </span>\n                                                                                    Google\n                                                                                </a>\n                                                                            );\n                                                                        } else if (btnClassName === \"btn-tw\") {\n                                                                            return (\n                                                                                <a onClick={clickHandler}\n                                                                                   className=\"idp-button-with-popup\"\n                                                                                   href={info.uri}\n                                                                                   data-popup-href={info.popupTokenUri}\n                                                                                   data-popup-width={width}\n                                                                                   data-popup-height={height}>\n                                                                    <span className=\"icon-BB_icn_sm_twitter\">\n                                                                        <span className=\"path1\"></span>\n                                                                        <span className=\"path2\"></span>\n                                                                    </span>\n                                                                                    Twitter\n                                                                                </a>\n                                                                            );\n                                                                        } else if (btnClassName === \"btn-wl\") {\n                                                                            return (\n                                                                                <a onClick={clickHandler}\n                                                                                   className=\"idp-button-with-popup\"\n                                                                                   href={info.uri}\n                                                                                   data-popup-href={info.popupTokenUri}\n                                                                                   data-popup-width={width}\n                                                                                   data-popup-height={height}>\n                                                                    <span className=\"icon-BB_icn_sm_windows\">\n                                                                        <span className=\"path1\"></span>\n                                                                        <span className=\"path2\"></span>\n                                                                        <span className=\"path3\"></span>\n                                                                        <span className=\"path4\"></span>\n                                                                    </span>\n                                                                                    Windows Live ID\n                                                                                </a>\n                                                                            );\n                                                                        } else if (btnClassName === \"btn-sko\") {\n                                                                            return (\n                                                                                <a onClick={clickHandler}\n                                                                                   className=\"idp-button-with-popup\"\n                                                                                   href={info.uri}\n                                                                                   data-popup-href={info.popupTokenUri}\n                                                                                   data-popup-width={width}\n                                                                                   data-popup-height={height}>\n                                                                    <span className=\"icon-BB_icn_sm_skolon\">\n                                                                        <span className=\"path1\"></span>\n                                                                        <span className=\"path2\"></span>\n                                                                    </span>\n                                                                                    Skolon\n                                                                                </a>\n                                                                            );\n                                                                        } else if (btnClassName === \"btn-feide\") {\n                                                                            return (\n                                                                                <a onClick={clickHandler}\n                                                                                   className=\"idp-button-with-popup\"\n                                                                                   href={info.uri}\n                                                                                   data-popup-href={info.popupTokenUri}\n                                                                                   data-popup-width={width}\n                                                                                   data-popup-height={height}>\n                                                                                    <img src={feideLogo}\n                                                                                         alt=\"\"/>\n                                                                                    {btnTitleStr}\n                                                                                </a>\n                                                                            );\n                                                                        } else {\n                                                                            return (\n                                                                                <a onClick={clickHandler}\n                                                                                   className=\"idp-button-with-popup\"\n                                                                                   href={info.uri}\n                                                                                   data-popup-href={info.popupTokenUri}\n                                                                                   data-popup-width={width}\n                                                                                   data-popup-height={height}>\n                                                                                    <span>{info.id}</span>\n                                                                                </a>\n                                                                            );\n                                                                        }\n                                                                    })()\n                                                                }\n                                                            </li>\n                                                        );\n                                                    })\n                                                }\n                                            </ul>\n\n                                            <p\n                                                className=\"center-text terms\">\n                                                <FormattedMessage\n                                                    id=\"weWillNeverPost\"\n                                                    defaultMessage=\"We will never post without your permission.\"\n                                                />\n                                            </p>\n                                            <p className=\"border-title text-center\">\n                                                        <span>\n                                                            <FormattedMessage\n                                                                id=\"orSeparator\"\n                                                                defaultMessage=\"OR\"\n                                                            />\n                                                        </span>\n                                            </p>\n                                        </div>\n                                    );\n                                } else {\n                                    return (<span></span>);\n                                }\n                            })()\n                        }\n                    </div>\n                );\n            } else {\n                return (\n                    <span></span>\n                );\n            }\n        } else {\n            return (\n                <span></span>\n            );\n        }\n    }\n\n    renderMainContentPartDefaultLoginPart() {\n        const {formatMessage} = this.props.intl;\n\n        if (this.state.mustChangeUsername) {\n            return this.renderMustChangeUsername();\n        } else if (this.state.idpEmailConflict !== false) {\n            return this.renderIdpEmailInUse();\n        } else if (this.state.mode === 'login') {\n            var data = JSON.stringify({\n                \"mode\": \"login\",\n                \"username\": this.state.username,\n                \"password\": this.state.password,\n                \"loginError\": this.state.loginError\n            });\n            var hash = sha1(data);\n            return (\n                <div key={hash}>\n                    <UserPasswordLogin onLogin={(username, password) => {\n                        return this.login(username, password);\n                    }} onForgotPassword={() => {\n                        return this.forgotPassword();\n                    }} onSignup={() => {\n                        return this.signup();\n                    }} username={this.state.username} password={this.state.password} loginError={this.state.loginError} />\n                </div>\n            );\n        } else if (this.state.mode === 'signup' || this.state.mode === 'signuptermsandconditions') {\n            var data = JSON.stringify({\n                \"mode\": \"signup\",\n                \"fields\": this.state.signupFields,\n                \"errors\": this.state.signupErrors\n            });\n            var hash = sha1(data);\n            var termsAndConditions = this.props.termsAndConditions;\n            termsAndConditions = termsAndConditions ? termsAndConditions : false;\n            var termsElement;\n            if (this.state.mode === 'signuptermsandconditions') {\n                termsElement = (\n                    <TermsAndConditions key={'signuptermsandconditions'} onAccept={() => {\n                        if (this.state.termsAndConditionsCallback !== null) {\n                            this.state.termsAndConditionsCallback(true);\n                            if (this.state.termsAndConditionsMode) {\n                                this.setState({\n                                    'mode': this.state.termsAndConditionsMode,\n                                    'termsAndConditions': null,\n                                    'termsAndConditionsMode': null,\n                                    'termsAndConditionsCallback': null\n                                });\n                            }\n                        } else {\n                            this.loginOperations.acceptTermsAndConditions(this.state.jwt);\n                        }\n                    }} onDecline={() => {\n                        if (this.state.termsAndConditionsCallback !== null) {\n                            this.state.termsAndConditionsCallback(false);\n                            if (this.state.termsAndConditionsMode) {\n                                this.setState({\n                                    'mode': this.state.termsAndConditionsMode,\n                                    'termsAndConditions': null,\n                                    'termsAndConditionsMode': null,\n                                    'termsAndConditionsCallback': null\n                                });\n                            }\n                        } else {\n                            this.declineTermsAndConditions();\n                        }\n                    }} termsAndConditions={this.state.termsAndConditions} />\n                );\n            } else {\n                termsElement = ( <span key={'no-signuptermsandconditions'}></span> );\n            }\n            if (this.state.email) {\n                return (\n                    <div>\n                        {termsElement}\n                        <div key={hash}>\n                            <SignupVerifiedEmailForm\n                                visible={this.state.mode === 'signup'}\n                                email={this.state.email}\n                                withoutPassword={this.state.extParams.signupWithoutPassword}\n                                autoSubmit={this.state.extParams.signupAutoSubmit}\n                                termsAndConditions={termsAndConditions}\n                                fields={this.state.signupFields}\n                                errors={this.state.signupErrors}\n                                onSignup={(password, termsAndConditions) => {\n                                    this.signupVerifiedSubmit(password, termsAndConditions);\n                                }}\n                                onLogin={() => {\n                                    this.setLoginMode();\n                                }}\n                                onTermsAndConditionsRequired={(termsAndConditions, accepted) => {\n                                    this.showTermsAndConditionsWithCallback(termsAndConditions, accepted);\n                                }}\n                            />\n                        </div>\n                    </div>\n                );\n            } else {\n                return (\n                    <div>\n                        {termsElement}\n                        <div key={hash}>\n                            <SignupForm\n                                visible={this.state.mode === 'signup'}\n                                withoutPassword={this.state.extParams.signupWithoutPassword}\n                                autoSubmit={this.state.extParams.signupAutoSubmit}\n                                termsAndConditions={termsAndConditions}\n                                fields={this.state.signupFields}\n                                errors={this.state.signupErrors}\n                                onSignup={(email, password, termsAndConditions) => {\n                                    this.signupSubmit(email, password, termsAndConditions);\n                                }}\n                                onLogin={() => {\n                                    this.setLoginMode();\n                                }}\n                                onTermsAndConditionsRequired={(termsAndConditions, accepted) => {\n                                    this.showTermsAndConditionsWithCallback(termsAndConditions, accepted);\n                                }}\n                            />\n                        </div>\n                    </div>\n                );\n            }\n        } else if (this.state.mode === 'forgotpassword') {\n            return (\n                <form key=\"forgotpassword\" method=\"post\">\n                    <div>\n                        <h1>\n                            <FormattedMessage\n                                id=\"resetPasswordHeading\"\n                                defaultMessage=\"Reset or create password\"\n                            />\n                        </h1>\n                        <label for=\"email-input\">\n                            <FormattedMessage\n                                id=\"emailFieldLabel\"\n                                defaultMessage=\"Email: \"\n                            />\n                        </label>\n                        <input type=\"text\" id=\"email-input\" name=\"email\"/>\n                    </div>\n                    <div>\n                        <input onClick={ (event) => { this.forgotPasswordByEmail(event); }} type=\"submit\" value={formatMessage(messages.continueButton)}/>\n                    </div>\n                </form>\n            );\n        } else if (this.state.mode === 'waitforemail') {\n            return (\n                <div key=\"waitforemail\" class=\"surikatt\">\n                    <div class=\"col-sm-4\"></div>\n                    <div class=\"col-sm-8\">\n                        <h1>\n                            <FormattedMessage\n                                id=\"weHaveSentEmailTitle\"\n                                defaultMessage=\"Nearly there!\"\n                            />\n                        </h1>\n                        <p>\n                            <FormattedMessage\n                                id=\"weHaveSentEmail\"\n                                defaultMessage={'We have sent you an e-mail to{linebreak}{resetEmail} ({changeEmailLink})'}\n                                values={{\n                                    \"linebreak\": <br/>,\n                                    \"resetEmail\": this.state.resetEmail,\n                                    \"changeEmailLink\": <a\n                                        onClick={(event) => {\n                                            event.preventDefault();\n                                            this.setState({'mode': 'forgotpassword'});\n                                        }} href=\"\"><FormattedMessage id=\"changeForgottenEmail\" defaultMessage=\"change email\"/></a>\n                                }}\n                            />\n                        </p>\n                        <p>\n                            <FormattedMessage\n                                id=\"pleaseFollowTheLinkFromEmail\"\n                                defaultMessage=\"Please follow the link in that e-mail to finish setting up your account.\"\n                            />\n                        </p>\n                        <div>\n                            <p>\n                                <FormattedMessage\n                                    id=\"didNotGetEmail\"\n                                    defaultMessage={'Didn\\'t get an email? {resendEmailLink}'}\n                                    values={{\n                                        \"resendEmailLink\": <a onClick={(event) => {\n                                            event.preventDefault();\n                                            this.forgotPasswordRequest(this.state.resetEmail);\n                                        }} href=\"\"><FormattedMessage id=\"resendEmail\" defaultMessage=\"Resend email.\"/></a>\n                                    }}\n                                />\n                            </p>\n                            <p>\n                                <FormattedMessage\n                                    id=\"rememberToCheckYourSpam\"\n                                    defaultMessage=\"Psst! Remember to check your spam folder\"\n                                />\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            );\n        } else if (this.state.mode === \"termsandconditions\") {\n            return (\n                <TermsAndConditions onAccept={() => {\n                    if (this.state.termsAndConditionsCallback !== null) {\n                        this.state.termsAndConditionsCallback(true);\n                        if (this.state.termsAndConditionsMode) {\n                            this.setState({\n                                'mode': this.state.termsAndConditionsMode,\n                                'termsAndConditions': null,\n                                'termsAndConditionsMode': null,\n                                'termsAndConditionsCallback': null\n                            });\n                        }\n                    } else {\n                        this.loginOperations.acceptTermsAndConditions(this.state.jwt);\n                    }\n                }} onDecline={() => {\n                    if (this.state.termsAndConditionsCallback !== null) {\n                        this.state.termsAndConditionsCallback(false);\n                        if (this.state.termsAndConditionsMode) {\n                            this.setState({\n                                'mode': this.state.termsAndConditionsMode,\n                                'termsAndConditions': null,\n                                'termsAndConditionsMode': null,\n                                'termsAndConditionsCallback': null\n                            });\n                        }\n                    } else {\n                        this.declineTermsAndConditions();\n                    }\n                }} termsAndConditions={this.state.termsAndConditions} />\n            );\n        } else {\n            return (\n                <span key=\"unknown-mode\"></span>\n            );\n        }\n    }\n\n    renderEnterpriseLogin() {\n        return (\n            <EnterpriseLogins\n                enterpriseLogins={this.getEnterpriseLogins()}\n                onClose={() => { this.setState({'mode': 'login'}); }}\n            />\n        );\n    }\n\n    render() {\n        if (this.state.spinner) {\n            return (\n                <Loader\n                    type=\"ThreeDots\"\n                    color=\"#00BFFF\"\n                    height=\"200\"\n                    width=\"200\"\n                />\n            );\n        }\n        return (\n            <div className=\"reactive-auth-login\">\n                { this.state.mode === 'enterprise-login' ? this.renderEnterpriseLogin() : null }\n                { this.state.mode !== 'enterprise-login' ? this.renderTopWithExtIdps() : null }\n                { this.state.mode !== 'enterprise-login' ? this.renderMainContentPartDefaultLoginPart() : null }\n            </div>\n        );\n    }\n}\n\nReactiveLogin.propTypes = {\n    intl: intlShape.isRequired,\n};\n\nconst ReactiveLoginClass = ReactiveLogin;\n\nexport {ReactiveLoginClass};\nexport default injectIntl(ReactiveLogin);\n"],"sourceRoot":""}